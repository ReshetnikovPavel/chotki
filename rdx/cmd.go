package rdx 

import (
"fmt"
"errors"
)

var _REPL_actions = [] int8 { 0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 2, 1, 2, 2, 1, 4, 2, 1, 5, 2, 1, 8, 2, 3, 0, 2, 3, 2, 2, 3, 4, 2, 3, 5, 2, 7, 0, 0 }
var _REPL_key_offsets = [] int16 { 0, 0, 6, 7, 8, 9, 16, 23, 25, 27, 31, 35, 37, 43, 50, 56, 62, 69, 78, 84, 90, 96, 102, 116, 123, 146, 169, 178, 184, 190, 196, 202, 204, 208, 210, 216, 223, 229, 235, 242, 251, 257, 263, 269, 275, 277, 291, 293, 299, 303, 309, 316, 322, 328, 335, 336, 337, 338, 341, 364, 374, 397, 406, 429, 443, 454, 473, 488, 504, 521, 537, 558, 574, 578, 601, 609, 615, 628, 638, 649, 661, 672, 688, 699, 713, 726, 738, 750, 767, 784, 803, 819, 836, 854, 871, 893, 0 }
var _REPL_trans_keys = [] byte { 32, 101, 110, 113, 9, 13, 120, 105, 116, 34, 46, 57, 92, 120, 48, 49, 34, 46, 57, 92, 120, 48, 49, 48, 57, 48, 57, 69, 101, 48, 57, 43, 45, 48, 57, 48, 57, 48, 57, 65, 70, 97, 102, 45, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 95, 48, 57, 65, 90, 97, 122, 34, 47, 92, 98, 102, 110, 114, 116, 117, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 34, 43, 45, 95, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 34, 46, 57, 92, 120, 48, 49, 32, 34, 44, 58, 91, 93, 95, 123, 125, 9, 13, 43, 45, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 34, 44, 58, 91, 93, 95, 123, 125, 9, 13, 43, 45, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 34, 47, 92, 98, 102, 110, 114, 116, 117, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 43, 45, 48, 57, 48, 57, 48, 57, 65, 70, 97, 102, 45, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 95, 48, 57, 65, 90, 97, 122, 34, 47, 92, 98, 102, 110, 114, 116, 117, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 34, 43, 45, 95, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 48, 57, 48, 57, 65, 70, 97, 102, 43, 45, 48, 57, 48, 57, 65, 70, 97, 102, 45, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 95, 48, 57, 65, 90, 97, 122, 101, 119, 117, 32, 9, 13, 32, 34, 44, 58, 91, 93, 95, 123, 125, 9, 13, 43, 45, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 46, 58, 91, 93, 123, 125, 9, 13, 32, 34, 44, 58, 91, 93, 95, 123, 125, 9, 13, 43, 45, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 58, 91, 93, 123, 125, 9, 13, 32, 34, 44, 58, 91, 93, 95, 123, 125, 9, 13, 43, 45, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 46, 58, 69, 91, 93, 101, 123, 125, 9, 13, 48, 57, 32, 44, 58, 91, 93, 123, 125, 9, 13, 48, 57, 32, 44, 45, 46, 58, 69, 91, 93, 101, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 58, 91, 93, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 43, 44, 45, 58, 91, 93, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 46, 9, 13, 32, 34, 44, 58, 91, 93, 95, 123, 125, 9, 13, 43, 45, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 46, 69, 101, 9, 13, 48, 57, 32, 46, 9, 13, 48, 57, 32, 45, 46, 69, 101, 9, 13, 48, 57, 65, 70, 97, 102, 32, 46, 9, 13, 48, 57, 65, 70, 97, 102, 32, 45, 46, 9, 13, 48, 57, 65, 70, 97, 102, 32, 43, 45, 46, 9, 13, 48, 57, 65, 70, 97, 102, 32, 45, 46, 9, 13, 48, 57, 65, 70, 97, 102, 32, 45, 46, 95, 9, 13, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 46, 95, 9, 13, 48, 57, 65, 90, 97, 122, 32, 44, 46, 58, 69, 91, 93, 101, 123, 125, 9, 13, 48, 57, 32, 45, 46, 69, 101, 9, 13, 48, 57, 65, 70, 97, 102, 32, 43, 45, 46, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 46, 58, 91, 93, 123, 125, 9, 13, 48, 57, 32, 44, 45, 46, 58, 91, 93, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 45, 46, 58, 91, 93, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 45, 46, 58, 69, 91, 93, 101, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 46, 58, 91, 93, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 45, 46, 58, 91, 93, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 43, 44, 45, 46, 58, 91, 93, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 45, 46, 58, 91, 93, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 45, 46, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 46, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 0 }
var _REPL_single_lengths = [] int8 { 0, 4, 1, 1, 1, 5, 5, 0, 0, 2, 2, 0, 0, 1, 0, 0, 1, 9, 0, 0, 0, 0, 4, 5, 9, 9, 9, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 1, 9, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 1, 9, 8, 9, 7, 9, 10, 7, 11, 7, 8, 9, 8, 9, 8, 2, 9, 4, 2, 5, 2, 3, 4, 3, 4, 3, 10, 5, 4, 8, 9, 9, 11, 8, 9, 10, 9, 10, 9, 0 }
var _REPL_range_lengths = [] int8 { 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 5, 1, 7, 7, 0, 3, 3, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 1, 5, 1, 3, 1, 3, 3, 3, 3, 3, 0, 0, 0, 1, 7, 1, 7, 1, 7, 2, 2, 4, 4, 4, 4, 4, 6, 4, 1, 7, 2, 2, 4, 4, 4, 4, 4, 6, 4, 2, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 6, 4, 0 }
var _REPL_index_offsets = [] int16 { 0, 0, 6, 8, 10, 12, 19, 26, 28, 30, 34, 38, 40, 44, 49, 53, 57, 62, 72, 76, 80, 84, 88, 98, 105, 122, 139, 149, 153, 157, 161, 165, 167, 171, 173, 177, 182, 186, 190, 195, 205, 209, 213, 217, 221, 223, 233, 235, 239, 243, 247, 252, 256, 260, 265, 267, 269, 271, 274, 291, 301, 318, 327, 344, 357, 367, 383, 395, 408, 422, 435, 451, 464, 468, 485, 492, 497, 507, 514, 522, 531, 539, 550, 558, 571, 581, 590, 601, 615, 629, 645, 658, 672, 687, 701, 718, 0 }
var _REPL_cond_targs = [] int8 { 1, 2, 54, 56, 1, 0, 3, 0, 4, 0, 57, 0, 59, 0, 0, 39, 0, 0, 5, 61, 0, 0, 17, 0, 0, 6, 63, 0, 9, 0, 10, 10, 9, 0, 11, 11, 64, 0, 64, 0, 13, 13, 13, 0, 14, 13, 13, 13, 0, 66, 66, 66, 0, 69, 13, 13, 0, 71, 71, 71, 71, 0, 6, 6, 6, 6, 6, 6, 6, 6, 18, 0, 19, 19, 19, 0, 20, 20, 20, 0, 21, 21, 21, 0, 6, 6, 6, 0, 23, 31, 31, 38, 76, 81, 38, 81, 38, 0, 72, 0, 0, 26, 0, 0, 23, 24, 6, 24, 24, 24, 24, 16, 24, 25, 24, 7, 65, 70, 16, 70, 16, 0, 24, 6, 24, 24, 24, 24, 16, 24, 25, 24, 7, 65, 70, 16, 70, 16, 0, 23, 23, 23, 23, 23, 23, 23, 23, 27, 0, 28, 28, 28, 0, 29, 29, 29, 0, 30, 30, 30, 0, 23, 23, 23, 0, 74, 0, 33, 33, 75, 0, 75, 0, 35, 35, 35, 0, 36, 35, 35, 35, 0, 77, 77, 77, 0, 80, 35, 35, 0, 82, 82, 82, 82, 0, 5, 5, 5, 5, 5, 5, 5, 5, 40, 0, 41, 41, 41, 0, 42, 42, 42, 0, 43, 43, 43, 0, 5, 5, 5, 0, 83, 0, 23, 31, 31, 38, 84, 81, 38, 81, 38, 0, 86, 0, 87, 35, 35, 0, 46, 46, 86, 0, 50, 50, 50, 0, 51, 50, 50, 50, 0, 90, 90, 90, 0, 93, 50, 50, 0, 95, 95, 95, 95, 0, 55, 0, 57, 0, 3, 0, 58, 58, 0, 58, 5, 24, 24, 24, 24, 53, 24, 25, 58, 44, 89, 94, 53, 94, 53, 0, 60, 60, 22, 60, 60, 60, 60, 62, 60, 0, 60, 6, 60, 60, 60, 60, 16, 60, 62, 60, 7, 65, 70, 16, 70, 16, 0, 60, 60, 60, 60, 60, 60, 62, 60, 0, 60, 6, 60, 60, 60, 60, 16, 60, 62, 60, 7, 65, 70, 16, 70, 16, 0, 60, 60, 8, 60, 10, 60, 60, 10, 60, 62, 60, 63, 0, 60, 60, 60, 60, 60, 60, 62, 60, 64, 0, 60, 60, 12, 8, 60, 68, 60, 60, 68, 60, 62, 60, 65, 67, 67, 0, 60, 60, 60, 60, 60, 60, 62, 60, 66, 66, 66, 0, 60, 60, 12, 60, 60, 60, 60, 62, 60, 67, 67, 67, 0, 60, 11, 60, 15, 60, 60, 60, 60, 62, 60, 67, 67, 67, 0, 60, 60, 14, 60, 60, 60, 60, 62, 60, 69, 13, 13, 0, 60, 60, 12, 60, 60, 60, 71, 60, 62, 60, 70, 70, 71, 70, 71, 0, 60, 60, 60, 60, 60, 71, 60, 62, 60, 71, 71, 71, 0, 73, 22, 73, 0, 73, 6, 24, 24, 24, 24, 16, 24, 25, 73, 7, 65, 70, 16, 70, 16, 0, 73, 22, 32, 32, 73, 74, 0, 73, 22, 73, 75, 0, 73, 34, 22, 79, 79, 73, 76, 78, 78, 0, 73, 22, 73, 77, 77, 77, 0, 73, 34, 22, 73, 78, 78, 78, 0, 73, 33, 37, 22, 73, 78, 78, 78, 0, 73, 36, 22, 73, 80, 35, 35, 0, 73, 34, 22, 82, 73, 81, 81, 82, 81, 82, 0, 73, 22, 82, 73, 82, 82, 82, 0, 60, 60, 45, 60, 48, 60, 60, 48, 60, 62, 60, 83, 0, 73, 34, 22, 85, 85, 73, 84, 78, 78, 0, 73, 46, 47, 22, 73, 88, 78, 78, 0, 60, 60, 22, 60, 60, 60, 60, 62, 60, 86, 0, 60, 60, 36, 22, 60, 60, 60, 60, 62, 60, 87, 35, 35, 0, 60, 60, 34, 22, 60, 60, 60, 60, 62, 60, 88, 78, 78, 0, 60, 60, 49, 45, 60, 92, 60, 60, 92, 60, 62, 60, 89, 91, 91, 0, 60, 60, 22, 60, 60, 60, 60, 62, 60, 90, 90, 90, 0, 60, 60, 49, 22, 60, 60, 60, 60, 62, 60, 91, 91, 91, 0, 60, 46, 60, 52, 22, 60, 60, 60, 60, 62, 60, 91, 91, 91, 0, 60, 60, 51, 22, 60, 60, 60, 60, 62, 60, 93, 50, 50, 0, 60, 60, 49, 22, 60, 60, 60, 95, 60, 62, 60, 94, 94, 95, 94, 95, 0, 60, 60, 22, 60, 60, 60, 95, 60, 62, 60, 95, 95, 95, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 0 }
var _REPL_cond_actions = [] int8 { 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 43, 43, 15, 43, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 11, 0, 0, 0, 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 7, 7, 37, 40, 7, 7, 7, 34, 7, 7, 31, 31, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 43, 43, 15, 43, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 0, 0, 0, 9, 11, 0, 0, 0, 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 17, 9, 0, 11, 0, 0, 5, 0, 17, 0, 0, 0, 9, 11, 0, 0, 0, 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 9, 11, 0, 0, 5, 0, 0, 0, 7, 7, 37, 40, 7, 7, 7, 34, 7, 7, 31, 31, 7, 7, 7, 7, 0, 3, 22, 0, 25, 0, 3, 3, 0, 19, 3, 3, 0, 0, 0, 9, 11, 0, 0, 5, 0, 0, 0, 0, 3, 22, 0, 0, 25, 0, 3, 3, 0, 19, 3, 3, 0, 0, 0, 0, 0, 9, 11, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 9, 0, 11, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 11, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 9, 0, 11, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 9, 0, 11, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 11, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 17, 0, 17, 0, 0, 0, 9, 11, 0, 0, 0, 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 28, 3, 0, 0, 28, 0, 0, 17, 0, 17, 0, 0, 28, 0, 3, 0, 0, 28, 0, 0, 0, 0, 17, 0, 17, 0, 0, 0, 0, 17, 0, 0, 17, 0, 0, 0, 0, 17, 0, 0, 0, 17, 0, 0, 0, 0, 17, 0, 0, 17, 0, 0, 0, 0, 17, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 17, 0, 0, 17, 0, 0, 0, 0, 28, 22, 3, 25, 0, 3, 3, 0, 19, 3, 28, 0, 0, 28, 0, 3, 0, 0, 28, 0, 0, 0, 0, 17, 0, 0, 0, 17, 0, 0, 0, 0, 17, 9, 0, 11, 0, 0, 5, 0, 17, 0, 0, 17, 9, 0, 0, 11, 0, 0, 5, 0, 17, 0, 0, 0, 0, 17, 9, 0, 0, 11, 0, 0, 5, 0, 17, 0, 0, 0, 0, 28, 22, 0, 3, 25, 0, 3, 3, 0, 19, 3, 28, 0, 0, 0, 0, 17, 9, 0, 11, 0, 0, 5, 0, 17, 0, 0, 0, 0, 17, 9, 0, 0, 11, 0, 0, 5, 0, 17, 0, 0, 0, 0, 17, 0, 9, 0, 0, 11, 0, 0, 5, 0, 17, 0, 0, 0, 0, 17, 9, 0, 0, 11, 0, 0, 5, 0, 17, 0, 0, 0, 0, 17, 9, 0, 0, 11, 0, 0, 0, 5, 0, 17, 0, 0, 0, 0, 0, 0, 17, 9, 0, 11, 0, 0, 0, 5, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 17, 0, 0, 7, 3, 0, 3, 0, 0, 0, 0, 0, 0, 17, 0, 28, 17, 28, 17, 17, 17, 17, 17, 17, 28, 28, 17, 17, 17, 17, 28, 17, 17, 17, 17, 17, 17, 0 }
var _REPL_eof_trans = [] int16 { 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 0 }
var REPL_start int = 1
var _ = REPL_start
var REPL_first_final int = 57
var _ = REPL_first_final
var REPL_error int = 0
var _ = REPL_error
var REPL_en_main int = 1
var _ = REPL_en_main
func ParseREPL(data []byte) (cmd string, path *RDX, rdx *RDX, err error) {

	var mark [RdxMaxNesting]int
	nest, cs, p, pe, eof := 0, 0, 0, len(data), len(data)
	
	rdx = &RDX{}
	path = &RDX{RdxType:RdxPath}
	
	{
		cs=int( REPL_start );
		
	}
	{
		var _klen int
		var _trans uint  = 0
		var _keys int
		var _acts int
		var _nacts uint
		_resume:
		{
		
		}
		if p == pe && p != eof {
			goto _out;
			
		}
		if p == eof {
			if _REPL_eof_trans[ cs ] > 0 {
				_trans=uint( _REPL_eof_trans[ cs ] ) - 1;
				
			}
			
		} else {
			_keys=int(_REPL_key_offsets[ cs ])
			;
			_trans=uint( _REPL_index_offsets[ cs ] );
			_klen=int( _REPL_single_lengths[ cs ] );
			if _klen > 0 {
				var _lower int = _keys
				var _upper int = _keys + _klen - 1
				var _mid int
				for {
					if _upper < _lower {
						_keys+=_klen;
						_trans+=uint( _klen );
						break;
						
					}
					_mid=_lower + ( ( _upper - _lower ) >> 1 );
					if ( data[ p ] ) < _REPL_trans_keys[ _mid ] {
						_upper=_mid - 1;
						
					} else if ( data[ p ] ) > _REPL_trans_keys[ _mid ] {
						_lower=_mid + 1;
						
					} else {
						_trans+=uint( ( _mid - _keys ) );
						goto _match;
						
					}
					
				}
				
			}
			_klen=int( _REPL_range_lengths[ cs ] );
			if _klen > 0 {
				var _lower int = _keys
				var _upper int = _keys + ( _klen << 1 ) - 2
				var _mid int
				for {
					if _upper < _lower {
						_trans+=uint( _klen );
						break;
						
					}
					_mid=_lower + ( ( ( _upper - _lower ) >> 1 ) & ^ 1 );
					if ( data[ p ] ) < _REPL_trans_keys[ _mid ] {
						_upper=_mid - 2;
						
					} else if ( data[ p ] ) > _REPL_trans_keys[ _mid + 1 ] {
						_lower=_mid + 2;
						
					} else {
						_trans+=uint( ( ( _mid - _keys ) >> 1 ) );
						break;
						
					}
					
				}
				
			}
			_match:
			{
			
			}
			
		}
		cs=int( _REPL_cond_targs[ _trans ] );
		if _REPL_cond_actions[ _trans ] != 0 {
			_acts=int(_REPL_cond_actions[ _trans ])
			;
			_nacts=uint( _REPL_actions[ _acts ] );
			_acts+=1;
			for _nacts > 0 {
				switch _REPL_actions[ _acts ] {
					case 0:
					{mark[nest] = p; }
					
					case 1:
					{rdx.RdxType = RdxInt; 
						rdx.Text = data[mark[nest] : p];
					}
					
					case 2:
					{n := rdx.Nested 
						n = append(n, RDX{Parent: rdx})
						rdx.Nested = n
						rdx.RdxType = RdxMap;
						rdx = &n[len(n)-1]
						nest++; 
					}
					
					case 3:
					{nest--;
						rdx = rdx.Parent;
					}
					
					case 4:
					{n := rdx.Parent.Nested 
						n = append(n, RDX{Parent: rdx.Parent})
						rdx.Parent.Nested = n
						rdx = &n[len(n)-1]
					}
					
					case 5:
					{n := rdx.Parent.Nested 
						n = append(n, RDX{Parent: rdx.Parent})
						rdx.Parent.Nested = n
						rdx = &n[len(n)-1]
					}
					
					case 6:
					{cmd = string(data[mark[0]:p]); }
					
					case 7:
					{rdx.Parent = path
						path.Nested = append(path.Nested, *rdx)
						rdx = &RDX{}
					}
					
					case 8:
					{rdx.Parent = path
						path.Nested = append(path.Nested, *rdx)
						rdx = &RDX{}
					}
					
					
				}
				_nacts-=1;
				_acts+=1;
				
			}
			
		}
		if p == eof {
			if cs >= 57 {
				goto _out;
				
			}
			
		} else {
			if cs != 0 {
				p+=1;
				goto _resume;
				
			}
			
		}
		_out:
		{
		
		}
		
	}
	if cs < REPL_first_final { 
		err = errors.New(fmt.Sprintf("command parsing failed at pos %d", p))
	}
	
	return
	
}
