package rdx 

import (
"fmt"
"errors"
)

var _REPL_actions = [] int8 { 0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 2, 1, 2, 2, 1, 4, 2, 1, 5, 2, 1, 8, 2, 3, 0, 2, 3, 2, 2, 3, 4, 2, 3, 5, 2, 7, 0, 0 }
var _REPL_key_offsets = [] int16 { 0, 0, 5, 12, 19, 21, 23, 27, 31, 33, 39, 46, 52, 58, 65, 74, 80, 86, 92, 98, 112, 119, 142, 165, 174, 180, 186, 192, 198, 200, 204, 206, 212, 219, 225, 231, 238, 247, 253, 259, 265, 271, 273, 287, 289, 295, 299, 305, 312, 318, 324, 331, 336, 359, 370, 393, 402, 425, 439, 450, 469, 484, 500, 517, 533, 554, 570, 575, 598, 607, 614, 628, 639, 651, 664, 676, 693, 705, 720, 734, 747, 760, 778, 796, 816, 833, 851, 870, 888, 911, 0 }
var _REPL_trans_keys = [] byte { 32, 9, 13, 97, 122, 34, 46, 57, 92, 120, 48, 49, 34, 46, 57, 92, 120, 48, 49, 48, 57, 48, 57, 69, 101, 48, 57, 43, 45, 48, 57, 48, 57, 48, 57, 65, 70, 97, 102, 45, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 95, 48, 57, 65, 90, 97, 122, 34, 47, 92, 98, 102, 110, 114, 116, 117, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 34, 43, 45, 95, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 34, 46, 57, 92, 120, 48, 49, 32, 34, 44, 58, 91, 93, 95, 123, 125, 9, 13, 43, 45, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 34, 44, 58, 91, 93, 95, 123, 125, 9, 13, 43, 45, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 34, 47, 92, 98, 102, 110, 114, 116, 117, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 43, 45, 48, 57, 48, 57, 48, 57, 65, 70, 97, 102, 45, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 95, 48, 57, 65, 90, 97, 122, 34, 47, 92, 98, 102, 110, 114, 116, 117, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 34, 43, 45, 95, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 48, 57, 48, 57, 65, 70, 97, 102, 43, 45, 48, 57, 48, 57, 65, 70, 97, 102, 45, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 95, 48, 57, 65, 90, 97, 122, 32, 9, 13, 97, 122, 32, 34, 44, 58, 91, 93, 95, 123, 125, 9, 13, 43, 45, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 58, 91, 93, 123, 125, 9, 13, 46, 47, 32, 34, 44, 58, 91, 93, 95, 123, 125, 9, 13, 43, 45, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 58, 91, 93, 123, 125, 9, 13, 32, 34, 44, 58, 91, 93, 95, 123, 125, 9, 13, 43, 45, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 46, 58, 69, 91, 93, 101, 123, 125, 9, 13, 48, 57, 32, 44, 58, 91, 93, 123, 125, 9, 13, 48, 57, 32, 44, 45, 46, 58, 69, 91, 93, 101, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 58, 91, 93, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 43, 44, 45, 58, 91, 93, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 9, 13, 46, 47, 32, 34, 44, 58, 91, 93, 95, 123, 125, 9, 13, 43, 45, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 69, 101, 9, 13, 46, 47, 48, 57, 32, 9, 13, 46, 47, 48, 57, 32, 45, 69, 101, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 45, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 43, 45, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 45, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 45, 95, 9, 13, 46, 47, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 95, 9, 13, 46, 47, 48, 57, 65, 90, 97, 122, 32, 44, 46, 47, 58, 69, 91, 93, 101, 123, 125, 9, 13, 48, 57, 32, 45, 69, 101, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 43, 45, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 45, 46, 47, 58, 69, 91, 93, 101, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 43, 44, 45, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 95, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 58, 91, 93, 95, 123, 125, 9, 13, 46, 47, 48, 57, 65, 90, 97, 122, 0 }
var _REPL_single_lengths = [] int8 { 0, 1, 5, 5, 0, 0, 2, 2, 0, 0, 1, 0, 0, 1, 9, 0, 0, 0, 0, 4, 5, 9, 9, 9, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 1, 9, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 1, 0, 0, 1, 1, 9, 7, 9, 7, 9, 10, 7, 11, 7, 8, 9, 8, 9, 8, 1, 9, 3, 1, 4, 1, 2, 3, 2, 3, 2, 11, 4, 3, 7, 8, 8, 12, 7, 8, 9, 8, 9, 8, 0 }
var _REPL_range_lengths = [] int8 { 0, 2, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 5, 1, 7, 7, 0, 3, 3, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 1, 5, 1, 3, 1, 3, 3, 3, 3, 3, 2, 7, 2, 7, 1, 7, 2, 2, 4, 4, 4, 4, 4, 6, 4, 2, 7, 3, 3, 5, 5, 5, 5, 5, 7, 5, 2, 5, 5, 3, 5, 5, 4, 5, 5, 5, 5, 7, 5, 0 }
var _REPL_index_offsets = [] int16 { 0, 0, 4, 11, 18, 20, 22, 26, 30, 32, 36, 41, 45, 49, 54, 64, 68, 72, 76, 80, 90, 97, 114, 131, 141, 145, 149, 153, 157, 159, 163, 165, 169, 174, 178, 182, 187, 197, 201, 205, 209, 213, 215, 225, 227, 231, 235, 239, 244, 248, 252, 257, 261, 278, 288, 305, 314, 331, 344, 354, 370, 382, 395, 409, 422, 438, 451, 455, 472, 479, 484, 494, 501, 509, 518, 526, 537, 545, 559, 569, 578, 589, 603, 617, 634, 647, 661, 676, 690, 707, 0 }
var _REPL_cond_targs = [] int8 { 1, 1, 51, 0, 53, 0, 0, 36, 0, 0, 2, 55, 0, 0, 14, 0, 0, 3, 57, 0, 6, 0, 7, 7, 6, 0, 8, 8, 58, 0, 58, 0, 10, 10, 10, 0, 11, 10, 10, 10, 0, 60, 60, 60, 0, 63, 10, 10, 0, 65, 65, 65, 65, 0, 3, 3, 3, 3, 3, 3, 3, 3, 15, 0, 16, 16, 16, 0, 17, 17, 17, 0, 18, 18, 18, 0, 3, 3, 3, 0, 20, 28, 28, 35, 70, 75, 35, 75, 35, 0, 66, 0, 0, 23, 0, 0, 20, 21, 3, 21, 21, 21, 21, 13, 21, 22, 21, 4, 59, 64, 13, 64, 13, 0, 21, 3, 21, 21, 21, 21, 13, 21, 22, 21, 4, 59, 64, 13, 64, 13, 0, 20, 20, 20, 20, 20, 20, 20, 20, 24, 0, 25, 25, 25, 0, 26, 26, 26, 0, 27, 27, 27, 0, 20, 20, 20, 0, 68, 0, 30, 30, 69, 0, 69, 0, 32, 32, 32, 0, 33, 32, 32, 32, 0, 71, 71, 71, 0, 74, 32, 32, 0, 76, 76, 76, 76, 0, 2, 2, 2, 2, 2, 2, 2, 2, 37, 0, 38, 38, 38, 0, 39, 39, 39, 0, 40, 40, 40, 0, 2, 2, 2, 0, 77, 0, 20, 28, 28, 35, 78, 75, 35, 75, 35, 0, 80, 0, 81, 32, 32, 0, 43, 43, 80, 0, 47, 47, 47, 0, 48, 47, 47, 47, 0, 84, 84, 84, 0, 87, 47, 47, 0, 89, 89, 89, 89, 0, 52, 52, 51, 0, 52, 2, 21, 21, 21, 21, 50, 21, 22, 52, 41, 83, 88, 50, 88, 50, 0, 54, 54, 54, 54, 54, 54, 56, 54, 19, 0, 54, 3, 54, 54, 54, 54, 13, 54, 56, 54, 4, 59, 64, 13, 64, 13, 0, 54, 54, 54, 54, 54, 54, 56, 54, 0, 54, 3, 54, 54, 54, 54, 13, 54, 56, 54, 4, 59, 64, 13, 64, 13, 0, 54, 54, 5, 54, 7, 54, 54, 7, 54, 56, 54, 57, 0, 54, 54, 54, 54, 54, 54, 56, 54, 58, 0, 54, 54, 9, 5, 54, 62, 54, 54, 62, 54, 56, 54, 59, 61, 61, 0, 54, 54, 54, 54, 54, 54, 56, 54, 60, 60, 60, 0, 54, 54, 9, 54, 54, 54, 54, 56, 54, 61, 61, 61, 0, 54, 8, 54, 12, 54, 54, 54, 54, 56, 54, 61, 61, 61, 0, 54, 54, 11, 54, 54, 54, 54, 56, 54, 63, 10, 10, 0, 54, 54, 9, 54, 54, 54, 65, 54, 56, 54, 64, 64, 65, 64, 65, 0, 54, 54, 54, 54, 54, 65, 54, 56, 54, 65, 65, 65, 0, 67, 67, 19, 0, 67, 3, 21, 21, 21, 21, 13, 21, 22, 67, 4, 59, 64, 13, 64, 13, 0, 67, 29, 29, 67, 19, 68, 0, 67, 67, 19, 69, 0, 67, 31, 73, 73, 67, 19, 70, 72, 72, 0, 67, 67, 19, 71, 71, 71, 0, 67, 31, 67, 19, 72, 72, 72, 0, 67, 30, 34, 67, 19, 72, 72, 72, 0, 67, 33, 67, 19, 74, 32, 32, 0, 67, 31, 76, 67, 19, 75, 75, 76, 75, 76, 0, 67, 76, 67, 19, 76, 76, 76, 0, 54, 54, 42, 19, 54, 45, 54, 54, 45, 54, 56, 54, 77, 0, 67, 31, 79, 79, 67, 19, 78, 72, 72, 0, 67, 43, 44, 67, 19, 82, 72, 72, 0, 54, 54, 54, 54, 54, 54, 56, 54, 19, 80, 0, 54, 54, 33, 54, 54, 54, 54, 56, 54, 19, 81, 32, 32, 0, 54, 54, 31, 54, 54, 54, 54, 56, 54, 19, 82, 72, 72, 0, 54, 54, 46, 42, 19, 54, 86, 54, 54, 86, 54, 56, 54, 83, 85, 85, 0, 54, 54, 54, 54, 54, 54, 56, 54, 19, 84, 84, 84, 0, 54, 54, 46, 54, 54, 54, 54, 56, 54, 19, 85, 85, 85, 0, 54, 43, 54, 49, 54, 54, 54, 54, 56, 54, 19, 85, 85, 85, 0, 54, 54, 48, 54, 54, 54, 54, 56, 54, 19, 87, 47, 47, 0, 54, 54, 46, 54, 54, 54, 89, 54, 56, 54, 19, 88, 88, 89, 88, 89, 0, 54, 54, 54, 54, 54, 89, 54, 56, 54, 19, 89, 89, 89, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 0 }
var _REPL_cond_actions = [] int8 { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 43, 43, 15, 43, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 11, 0, 0, 0, 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 7, 7, 37, 40, 7, 7, 7, 34, 7, 7, 31, 31, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 43, 43, 15, 43, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 0, 0, 0, 0, 9, 11, 0, 0, 0, 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 17, 9, 11, 0, 0, 5, 0, 17, 0, 0, 0, 0, 9, 11, 0, 0, 0, 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 9, 11, 0, 0, 5, 0, 0, 0, 7, 7, 37, 40, 7, 7, 7, 34, 7, 7, 31, 31, 7, 7, 7, 7, 0, 3, 22, 0, 25, 0, 3, 3, 0, 19, 3, 3, 0, 0, 0, 9, 11, 0, 0, 5, 0, 0, 0, 0, 3, 22, 0, 0, 25, 0, 3, 3, 0, 19, 3, 3, 0, 0, 0, 0, 0, 9, 11, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 9, 0, 11, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 11, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 9, 0, 11, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 9, 0, 11, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 11, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 17, 17, 0, 0, 0, 0, 9, 11, 0, 0, 0, 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 28, 0, 0, 28, 3, 0, 0, 17, 17, 0, 0, 0, 28, 0, 0, 0, 28, 3, 0, 0, 0, 0, 17, 17, 0, 0, 0, 0, 0, 17, 0, 17, 0, 0, 0, 0, 0, 17, 0, 0, 17, 0, 0, 0, 0, 0, 17, 0, 17, 0, 0, 0, 0, 0, 17, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 17, 0, 17, 0, 0, 0, 0, 0, 28, 22, 3, 3, 25, 0, 3, 3, 0, 19, 3, 28, 0, 0, 28, 0, 0, 0, 28, 3, 0, 0, 0, 0, 17, 0, 0, 17, 0, 0, 0, 0, 0, 17, 9, 11, 0, 0, 5, 0, 17, 0, 0, 0, 17, 9, 0, 11, 0, 0, 5, 0, 17, 0, 0, 0, 0, 0, 17, 9, 0, 11, 0, 0, 5, 0, 17, 0, 0, 0, 0, 0, 28, 22, 0, 3, 3, 25, 0, 3, 3, 0, 19, 3, 28, 0, 0, 0, 0, 17, 9, 11, 0, 0, 5, 0, 17, 0, 0, 0, 0, 0, 17, 9, 0, 11, 0, 0, 5, 0, 17, 0, 0, 0, 0, 0, 17, 0, 9, 0, 11, 0, 0, 5, 0, 17, 0, 0, 0, 0, 0, 17, 9, 0, 11, 0, 0, 5, 0, 17, 0, 0, 0, 0, 0, 17, 9, 0, 11, 0, 0, 0, 5, 0, 17, 0, 0, 0, 0, 0, 0, 0, 17, 9, 11, 0, 0, 0, 5, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 17, 0, 0, 7, 3, 0, 3, 0, 0, 0, 0, 0, 0, 17, 0, 28, 17, 28, 17, 17, 17, 17, 17, 17, 28, 28, 17, 17, 17, 17, 28, 17, 17, 17, 17, 17, 17, 0 }
var _REPL_eof_trans = [] int16 { 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 0 }
var REPL_start int = 1
var _ = REPL_start
var REPL_first_final int = 51
var _ = REPL_first_final
var REPL_error int = 0
var _ = REPL_error
var REPL_en_main int = 1
var _ = REPL_en_main
func ParseREPL(data []byte) (cmd string, path *RDX, rdx *RDX, err error) {

	var mark [RdxMaxNesting]int
	nest, cs, p, pe, eof := 0, 0, 0, len(data), len(data)
	
	rdx = &RDX{}
	path = &RDX{RdxType:RdxPath}
	
	{
		cs=int( REPL_start );
		
	}
	{
		var _klen int
		var _trans uint  = 0
		var _keys int
		var _acts int
		var _nacts uint
		_resume:
		{
		
		}
		if p == pe && p != eof {
			goto _out;
			
		}
		if p == eof {
			if _REPL_eof_trans[ cs ] > 0 {
				_trans=uint( _REPL_eof_trans[ cs ] ) - 1;
				
			}
			
		} else {
			_keys=int(_REPL_key_offsets[ cs ])
			;
			_trans=uint( _REPL_index_offsets[ cs ] );
			_klen=int( _REPL_single_lengths[ cs ] );
			if _klen > 0 {
				var _lower int = _keys
				var _upper int = _keys + _klen - 1
				var _mid int
				for {
					if _upper < _lower {
						_keys+=_klen;
						_trans+=uint( _klen );
						break;
						
					}
					_mid=_lower + ( ( _upper - _lower ) >> 1 );
					if ( data[ p ] ) < _REPL_trans_keys[ _mid ] {
						_upper=_mid - 1;
						
					} else if ( data[ p ] ) > _REPL_trans_keys[ _mid ] {
						_lower=_mid + 1;
						
					} else {
						_trans+=uint( ( _mid - _keys ) );
						goto _match;
						
					}
					
				}
				
			}
			_klen=int( _REPL_range_lengths[ cs ] );
			if _klen > 0 {
				var _lower int = _keys
				var _upper int = _keys + ( _klen << 1 ) - 2
				var _mid int
				for {
					if _upper < _lower {
						_trans+=uint( _klen );
						break;
						
					}
					_mid=_lower + ( ( ( _upper - _lower ) >> 1 ) & ^ 1 );
					if ( data[ p ] ) < _REPL_trans_keys[ _mid ] {
						_upper=_mid - 2;
						
					} else if ( data[ p ] ) > _REPL_trans_keys[ _mid + 1 ] {
						_lower=_mid + 2;
						
					} else {
						_trans+=uint( ( ( _mid - _keys ) >> 1 ) );
						break;
						
					}
					
				}
				
			}
			_match:
			{
			
			}
			
		}
		cs=int( _REPL_cond_targs[ _trans ] );
		if _REPL_cond_actions[ _trans ] != 0 {
			_acts=int(_REPL_cond_actions[ _trans ])
			;
			_nacts=uint( _REPL_actions[ _acts ] );
			_acts+=1;
			for _nacts > 0 {
				switch _REPL_actions[ _acts ] {
					case 0:
					{mark[nest] = p; }
					
					case 1:
					{rdx.RdxType = RdxInt; 
						rdx.Text = data[mark[nest] : p];
					}
					
					case 2:
					{n := rdx.Nested 
						n = append(n, RDX{Parent: rdx})
						rdx.Nested = n
						rdx.RdxType = RdxMap;
						rdx = &n[len(n)-1]
						nest++; 
					}
					
					case 3:
					{nest--;
						rdx = rdx.Parent;
					}
					
					case 4:
					{n := rdx.Parent.Nested 
						n = append(n, RDX{Parent: rdx.Parent})
						rdx.Parent.Nested = n
						rdx = &n[len(n)-1]
					}
					
					case 5:
					{n := rdx.Parent.Nested 
						n = append(n, RDX{Parent: rdx.Parent})
						rdx.Parent.Nested = n
						rdx = &n[len(n)-1]
					}
					
					case 6:
					{cmd = string(data[mark[0]:p]); }
					
					case 7:
					{rdx.Parent = path
						path.Nested = append(path.Nested, *rdx)
						rdx = &RDX{}
					}
					
					case 8:
					{rdx.Parent = path
						path.Nested = append(path.Nested, *rdx)
						rdx = &RDX{}
					}
					
					
				}
				_nacts-=1;
				_acts+=1;
				
			}
			
		}
		if p == eof {
			if cs >= 51 {
				goto _out;
				
			}
			
		} else {
			if cs != 0 {
				p+=1;
				goto _resume;
				
			}
			
		}
		_out:
		{
		
		}
		
	}
	if cs < REPL_first_final { 
		err = errors.New(fmt.Sprintf("command parsing failed at pos %d", p))
	}
	
	return
	
}
