package rdx

import (
	"fmt"
)

var _REPL_actions = []int8{0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 1, 10, 1, 11, 2, 1, 3, 2, 1, 5, 2, 1, 7, 2, 1, 8, 2, 1, 11, 2, 2, 3, 2, 2, 5, 2, 2, 7, 2, 2, 8, 2, 2, 11, 2, 4, 0, 2, 4, 3, 2, 4, 5, 2, 4, 7, 2, 4, 8, 2, 6, 0, 2, 6, 3, 2, 6, 5, 2, 6, 7, 2, 6, 8, 2, 10, 0, 0}
var _REPL_key_offsets = []int16{0, 0, 5, 12, 19, 21, 23, 27, 31, 33, 39, 46, 52, 58, 65, 74, 80, 86, 92, 98, 112, 119, 142, 165, 188, 197, 203, 209, 215, 221, 223, 227, 229, 235, 242, 248, 254, 261, 270, 276, 282, 288, 294, 296, 310, 312, 318, 322, 328, 335, 341, 347, 354, 359, 382, 393, 416, 425, 448, 462, 473, 496, 515, 530, 546, 563, 579, 600, 616, 621, 644, 653, 660, 674, 685, 697, 710, 722, 739, 751, 766, 780, 793, 806, 824, 842, 862, 879, 897, 916, 934, 957, 0}
var _REPL_trans_keys = []byte{32, 9, 13, 97, 122, 34, 46, 57, 92, 120, 48, 49, 34, 46, 57, 92, 120, 48, 49, 48, 57, 48, 57, 69, 101, 48, 57, 43, 45, 48, 57, 48, 57, 48, 57, 65, 70, 97, 102, 45, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 95, 48, 57, 65, 90, 97, 122, 34, 47, 92, 98, 102, 110, 114, 116, 117, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 34, 43, 45, 95, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 34, 46, 57, 92, 120, 48, 49, 32, 34, 44, 58, 91, 93, 95, 123, 125, 9, 13, 43, 45, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 34, 44, 58, 91, 93, 95, 123, 125, 9, 13, 43, 45, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 34, 44, 58, 91, 93, 95, 123, 125, 9, 13, 43, 45, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 34, 47, 92, 98, 102, 110, 114, 116, 117, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 43, 45, 48, 57, 48, 57, 48, 57, 65, 70, 97, 102, 45, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 95, 48, 57, 65, 90, 97, 122, 34, 47, 92, 98, 102, 110, 114, 116, 117, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 34, 43, 45, 95, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 48, 57, 48, 57, 65, 70, 97, 102, 43, 45, 48, 57, 48, 57, 65, 70, 97, 102, 45, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 95, 48, 57, 65, 90, 97, 122, 32, 9, 13, 97, 122, 32, 34, 44, 58, 91, 93, 95, 123, 125, 9, 13, 43, 45, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 58, 91, 93, 123, 125, 9, 13, 46, 47, 32, 34, 44, 58, 91, 93, 95, 123, 125, 9, 13, 43, 45, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 58, 91, 93, 123, 125, 9, 13, 32, 34, 44, 58, 91, 93, 95, 123, 125, 9, 13, 43, 45, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 46, 58, 69, 91, 93, 101, 123, 125, 9, 13, 48, 57, 32, 44, 58, 91, 93, 123, 125, 9, 13, 48, 57, 32, 34, 44, 58, 91, 93, 95, 123, 125, 9, 13, 43, 45, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 45, 46, 58, 69, 91, 93, 101, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 58, 91, 93, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 43, 44, 45, 58, 91, 93, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 9, 13, 46, 47, 32, 34, 44, 58, 91, 93, 95, 123, 125, 9, 13, 43, 45, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 69, 101, 9, 13, 46, 47, 48, 57, 32, 9, 13, 46, 47, 48, 57, 32, 45, 69, 101, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 45, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 43, 45, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 45, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 45, 95, 9, 13, 46, 47, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 95, 9, 13, 46, 47, 48, 57, 65, 90, 97, 122, 32, 44, 46, 47, 58, 69, 91, 93, 101, 123, 125, 9, 13, 48, 57, 32, 45, 69, 101, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 43, 45, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 45, 46, 47, 58, 69, 91, 93, 101, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 43, 44, 45, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 95, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 58, 91, 93, 95, 123, 125, 9, 13, 46, 47, 48, 57, 65, 90, 97, 122, 0}
var _REPL_single_lengths = []int8{0, 1, 5, 5, 0, 0, 2, 2, 0, 0, 1, 0, 0, 1, 9, 0, 0, 0, 0, 4, 5, 9, 9, 9, 9, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 1, 9, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 1, 0, 0, 1, 1, 9, 7, 9, 7, 9, 10, 7, 9, 11, 7, 8, 9, 8, 9, 8, 1, 9, 3, 1, 4, 1, 2, 3, 2, 3, 2, 11, 4, 3, 7, 8, 8, 12, 7, 8, 9, 8, 9, 8, 0}
var _REPL_range_lengths = []int8{0, 2, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 5, 1, 7, 7, 7, 0, 3, 3, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 1, 5, 1, 3, 1, 3, 3, 3, 3, 3, 2, 7, 2, 7, 1, 7, 2, 2, 7, 4, 4, 4, 4, 4, 6, 4, 2, 7, 3, 3, 5, 5, 5, 5, 5, 7, 5, 2, 5, 5, 3, 5, 5, 4, 5, 5, 5, 5, 7, 5, 0}
var _REPL_index_offsets = []int16{0, 0, 4, 11, 18, 20, 22, 26, 30, 32, 36, 41, 45, 49, 54, 64, 68, 72, 76, 80, 90, 97, 114, 131, 148, 158, 162, 166, 170, 174, 176, 180, 182, 186, 191, 195, 199, 204, 214, 218, 222, 226, 230, 232, 242, 244, 248, 252, 256, 261, 265, 269, 274, 278, 295, 305, 322, 331, 348, 361, 371, 388, 404, 416, 429, 443, 456, 472, 485, 489, 506, 513, 518, 528, 535, 543, 552, 560, 571, 579, 593, 603, 612, 623, 637, 651, 668, 681, 695, 710, 724, 741, 0}
var _REPL_cond_targs = []int8{1, 1, 52, 0, 54, 0, 0, 37, 0, 0, 2, 56, 0, 0, 14, 0, 0, 3, 58, 0, 6, 0, 7, 7, 6, 0, 8, 8, 59, 0, 59, 0, 10, 10, 10, 0, 11, 10, 10, 10, 0, 62, 62, 62, 0, 65, 10, 10, 0, 67, 67, 67, 67, 0, 3, 3, 3, 3, 3, 3, 3, 3, 15, 0, 16, 16, 16, 0, 17, 17, 17, 0, 18, 18, 18, 0, 3, 3, 3, 0, 20, 29, 29, 36, 72, 77, 36, 77, 36, 0, 68, 0, 0, 24, 0, 0, 20, 21, 3, 21, 21, 21, 22, 13, 21, 23, 21, 4, 61, 66, 13, 66, 13, 0, 21, 3, 21, 21, 21, 22, 13, 21, 23, 21, 4, 61, 66, 13, 66, 13, 0, 21, 3, 21, 21, 21, 22, 13, 21, 23, 21, 4, 61, 66, 13, 66, 13, 0, 20, 20, 20, 20, 20, 20, 20, 20, 25, 0, 26, 26, 26, 0, 27, 27, 27, 0, 28, 28, 28, 0, 20, 20, 20, 0, 70, 0, 31, 31, 71, 0, 71, 0, 33, 33, 33, 0, 34, 33, 33, 33, 0, 73, 73, 73, 0, 76, 33, 33, 0, 78, 78, 78, 78, 0, 2, 2, 2, 2, 2, 2, 2, 2, 38, 0, 39, 39, 39, 0, 40, 40, 40, 0, 41, 41, 41, 0, 2, 2, 2, 0, 79, 0, 20, 29, 29, 36, 80, 77, 36, 77, 36, 0, 82, 0, 83, 33, 33, 0, 44, 44, 82, 0, 48, 48, 48, 0, 49, 48, 48, 48, 0, 86, 86, 86, 0, 89, 48, 48, 0, 91, 91, 91, 91, 0, 53, 53, 52, 0, 53, 2, 21, 21, 21, 22, 51, 21, 23, 53, 42, 85, 90, 51, 90, 51, 0, 55, 55, 55, 55, 57, 55, 60, 55, 19, 0, 55, 3, 55, 55, 55, 57, 13, 55, 60, 55, 4, 61, 66, 13, 66, 13, 0, 55, 55, 55, 55, 57, 55, 60, 55, 0, 55, 3, 55, 55, 55, 57, 13, 55, 60, 55, 4, 61, 66, 13, 66, 13, 0, 55, 55, 5, 55, 7, 55, 57, 7, 55, 60, 55, 58, 0, 55, 55, 55, 55, 57, 55, 60, 55, 59, 0, 55, 3, 55, 55, 55, 57, 13, 55, 60, 55, 4, 61, 66, 13, 66, 13, 0, 55, 55, 9, 5, 55, 64, 55, 57, 64, 55, 60, 55, 61, 63, 63, 0, 55, 55, 55, 55, 57, 55, 60, 55, 62, 62, 62, 0, 55, 55, 9, 55, 55, 57, 55, 60, 55, 63, 63, 63, 0, 55, 8, 55, 12, 55, 55, 57, 55, 60, 55, 63, 63, 63, 0, 55, 55, 11, 55, 55, 57, 55, 60, 55, 65, 10, 10, 0, 55, 55, 9, 55, 55, 57, 67, 55, 60, 55, 66, 66, 67, 66, 67, 0, 55, 55, 55, 55, 57, 67, 55, 60, 55, 67, 67, 67, 0, 69, 69, 19, 0, 69, 3, 21, 21, 21, 22, 13, 21, 23, 69, 4, 61, 66, 13, 66, 13, 0, 69, 30, 30, 69, 19, 70, 0, 69, 69, 19, 71, 0, 69, 32, 75, 75, 69, 19, 72, 74, 74, 0, 69, 69, 19, 73, 73, 73, 0, 69, 32, 69, 19, 74, 74, 74, 0, 69, 31, 35, 69, 19, 74, 74, 74, 0, 69, 34, 69, 19, 76, 33, 33, 0, 69, 32, 78, 69, 19, 77, 77, 78, 77, 78, 0, 69, 78, 69, 19, 78, 78, 78, 0, 55, 55, 43, 19, 55, 46, 55, 57, 46, 55, 60, 55, 79, 0, 69, 32, 81, 81, 69, 19, 80, 74, 74, 0, 69, 44, 45, 69, 19, 84, 74, 74, 0, 55, 55, 55, 55, 57, 55, 60, 55, 19, 82, 0, 55, 55, 34, 55, 55, 57, 55, 60, 55, 19, 83, 33, 33, 0, 55, 55, 32, 55, 55, 57, 55, 60, 55, 19, 84, 74, 74, 0, 55, 55, 47, 43, 19, 55, 88, 55, 57, 88, 55, 60, 55, 85, 87, 87, 0, 55, 55, 55, 55, 57, 55, 60, 55, 19, 86, 86, 86, 0, 55, 55, 47, 55, 55, 57, 55, 60, 55, 19, 87, 87, 87, 0, 55, 44, 55, 50, 55, 55, 57, 55, 60, 55, 19, 87, 87, 87, 0, 55, 55, 49, 55, 55, 57, 55, 60, 55, 19, 89, 48, 48, 0, 55, 55, 47, 55, 55, 57, 91, 55, 60, 55, 19, 90, 90, 91, 90, 91, 0, 55, 55, 55, 55, 57, 91, 55, 60, 55, 19, 91, 91, 91, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 0}
var _REPL_cond_actions = []int8{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 85, 85, 21, 85, 21, 21, 21, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 15, 17, 11, 0, 0, 7, 0, 0, 1, 1, 0, 0, 0, 0, 0, 13, 70, 79, 82, 76, 13, 13, 73, 13, 13, 70, 70, 13, 13, 13, 13, 0, 9, 55, 64, 67, 61, 9, 9, 58, 9, 9, 55, 55, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 85, 85, 21, 85, 21, 21, 21, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 19, 0, 0, 0, 1, 15, 17, 11, 0, 0, 7, 0, 0, 1, 1, 0, 0, 0, 0, 0, 52, 46, 49, 43, 5, 40, 5, 52, 5, 0, 0, 1, 15, 17, 11, 0, 0, 7, 0, 0, 1, 1, 0, 0, 0, 0, 0, 5, 46, 49, 43, 5, 40, 5, 5, 0, 13, 70, 79, 82, 76, 13, 13, 73, 13, 13, 70, 70, 13, 13, 13, 13, 0, 3, 31, 0, 34, 0, 28, 3, 0, 25, 3, 3, 0, 0, 0, 15, 17, 11, 0, 7, 0, 0, 0, 0, 9, 55, 64, 67, 61, 9, 9, 58, 9, 9, 55, 55, 9, 9, 9, 9, 0, 3, 31, 0, 0, 34, 0, 28, 3, 0, 25, 3, 3, 0, 0, 0, 0, 0, 15, 17, 11, 0, 7, 0, 0, 0, 0, 0, 0, 0, 15, 0, 17, 11, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 17, 11, 0, 7, 0, 0, 0, 0, 0, 0, 0, 15, 0, 17, 11, 0, 7, 0, 0, 0, 0, 0, 0, 0, 15, 0, 17, 11, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 17, 11, 0, 0, 7, 0, 0, 0, 0, 0, 0, 52, 52, 5, 0, 0, 1, 15, 17, 11, 0, 0, 7, 0, 0, 1, 1, 0, 0, 0, 0, 0, 37, 0, 0, 37, 3, 0, 0, 23, 23, 0, 0, 0, 37, 0, 0, 0, 37, 3, 0, 0, 0, 0, 23, 23, 0, 0, 0, 0, 0, 23, 0, 23, 0, 0, 0, 0, 0, 23, 0, 0, 23, 0, 0, 0, 0, 0, 23, 0, 23, 0, 0, 0, 0, 0, 23, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 23, 0, 23, 0, 0, 0, 0, 0, 37, 31, 3, 3, 34, 0, 28, 3, 0, 25, 3, 37, 0, 0, 37, 0, 0, 0, 37, 3, 0, 0, 0, 0, 23, 0, 0, 23, 0, 0, 0, 0, 0, 23, 15, 17, 11, 0, 7, 0, 23, 0, 0, 0, 23, 15, 0, 17, 11, 0, 7, 0, 23, 0, 0, 0, 0, 0, 23, 15, 0, 17, 11, 0, 7, 0, 23, 0, 0, 0, 0, 0, 37, 31, 0, 3, 3, 34, 0, 28, 3, 0, 25, 3, 37, 0, 0, 0, 0, 23, 15, 17, 11, 0, 7, 0, 23, 0, 0, 0, 0, 0, 23, 15, 0, 17, 11, 0, 7, 0, 23, 0, 0, 0, 0, 0, 23, 0, 15, 0, 17, 11, 0, 7, 0, 23, 0, 0, 0, 0, 0, 23, 15, 0, 17, 11, 0, 7, 0, 23, 0, 0, 0, 0, 0, 23, 15, 0, 17, 11, 0, 0, 7, 0, 23, 0, 0, 0, 0, 0, 0, 0, 23, 15, 17, 11, 0, 0, 7, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 52, 0, 5, 13, 3, 0, 9, 3, 0, 0, 0, 0, 0, 0, 52, 0, 37, 23, 37, 23, 23, 23, 23, 23, 23, 37, 37, 23, 23, 23, 23, 37, 23, 23, 23, 23, 23, 23, 0}
var _REPL_eof_trans = []int16{756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 0}
var REPL_start int = 1
var _ = REPL_start
var REPL_first_final int = 52
var _ = REPL_first_final
var REPL_error int = 0
var _ = REPL_error
var REPL_en_main int = 1
var _ = REPL_en_main

func ParseREPL(data []byte) (cmd string, path *RDX, rdx *RDX, err error) {

	var mark [RdxMaxNesting]int
	nest, cs, p, pe, eof := 0, 0, 0, len(data), len(data)

	rdx = &RDX{}
	path = &RDX{RdxType: RdxPath}

	{
		cs = int(REPL_start)

	}
	{
		var _klen int
		var _trans uint = 0
		var _keys int
		var _acts int
		var _nacts uint
	_resume:
		{

		}
		if p == pe && p != eof {
			goto _out

		}
		if p == eof {
			if _REPL_eof_trans[cs] > 0 {
				_trans = uint(_REPL_eof_trans[cs]) - 1

			}

		} else {
			_keys = int(_REPL_key_offsets[cs])

			_trans = uint(_REPL_index_offsets[cs])
			_klen = int(_REPL_single_lengths[cs])
			if _klen > 0 {
				var _lower int = _keys
				var _upper int = _keys + _klen - 1
				var _mid int
				for {
					if _upper < _lower {
						_keys += _klen
						_trans += uint(_klen)
						break

					}
					_mid = _lower + ((_upper - _lower) >> 1)
					if (data[p]) < _REPL_trans_keys[_mid] {
						_upper = _mid - 1

					} else if (data[p]) > _REPL_trans_keys[_mid] {
						_lower = _mid + 1

					} else {
						_trans += uint((_mid - _keys))
						goto _match

					}

				}

			}
			_klen = int(_REPL_range_lengths[cs])
			if _klen > 0 {
				var _lower int = _keys
				var _upper int = _keys + (_klen << 1) - 2
				var _mid int
				for {
					if _upper < _lower {
						_trans += uint(_klen)
						break

					}
					_mid = _lower + (((_upper - _lower) >> 1) & ^1)
					if (data[p]) < _REPL_trans_keys[_mid] {
						_upper = _mid - 2

					} else if (data[p]) > _REPL_trans_keys[_mid+1] {
						_lower = _mid + 2

					} else {
						_trans += uint(((_mid - _keys) >> 1))
						break

					}

				}

			}
		_match:
			{

			}

		}
		cs = int(_REPL_cond_targs[_trans])
		if _REPL_cond_actions[_trans] != 0 {
			_acts = int(_REPL_cond_actions[_trans])

			_nacts = uint(_REPL_actions[_acts])
			_acts += 1
			for _nacts > 0 {
				switch _REPL_actions[_acts] {
				case 0:
					{
						mark[nest] = p
					}

				case 1:
					{
						rdx.RdxType = RdxInt
						rdx.Text = data[mark[nest]:p]
					}

				case 2:
					{
						rdx.RdxType = RdxString
						rdx.Text = data[mark[nest]:p]
					}

				case 3:
					{
						n := rdx.Nested
						n = append(n, RDX{Parent: rdx})
						rdx.Nested = n
						rdx.RdxType = RdxMap
						rdx = &n[len(n)-1]
						nest++
					}

				case 4:
					{
						nest--
						rdx = rdx.Parent
					}

				case 5:
					{
						n := rdx.Nested
						n = append(n, RDX{Parent: rdx})
						rdx.Nested = n
						rdx.RdxType = RdxArray
						rdx = &n[len(n)-1]
						nest++
					}

				case 6:
					{
						nest--
						rdx = rdx.Parent
					}

				case 7:
					{
						if rdx.Parent == nil {
							{
								p += 1
								goto _out

							}

						}
						n := rdx.Parent.Nested
						n = append(n, RDX{Parent: rdx.Parent})
						rdx.Parent.Nested = n
						rdx = &n[len(n)-1]
					}

				case 8:
					{
						n := rdx.Parent.Nested
						n = append(n, RDX{Parent: rdx.Parent})
						rdx.Parent.Nested = n
						rdx = &n[len(n)-1]
					}

				case 9:
					{
						cmd = string(data[mark[0]:p])
					}

				case 10:
					{
						rdx.Parent = path
						path.Nested = append(path.Nested, *rdx)
						rdx = &RDX{}
					}

				case 11:
					{
						rdx.Parent = path
						path.Nested = append(path.Nested, *rdx)
						rdx = &RDX{}
					}

				}
				_nacts -= 1
				_acts += 1

			}

		}
		if p == eof {
			if cs >= 52 {
				goto _out

			}

		} else {
			if cs != 0 {
				p += 1
				goto _resume

			}

		}
	_out:
		{

		}

	}
	if cs < REPL_first_final {
		err = fmt.Errorf("command parsing failed at pos %d", p)
	}

	return

}
