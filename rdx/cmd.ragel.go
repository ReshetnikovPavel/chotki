package rdx

import (
	"fmt"
)

var _REPL_actions = []int8{0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 2, 1, 3, 2, 1, 10, 2, 1, 12, 2, 1, 14, 2, 1, 15, 2, 1, 18, 2, 2, 7, 2, 2, 10, 2, 2, 12, 2, 2, 14, 2, 2, 15, 2, 2, 18, 2, 3, 10, 2, 3, 12, 2, 3, 14, 2, 3, 15, 2, 3, 18, 2, 4, 10, 2, 4, 12, 2, 4, 14, 2, 4, 15, 2, 4, 18, 2, 5, 10, 2, 5, 12, 2, 5, 14, 2, 5, 15, 2, 5, 18, 2, 6, 10, 2, 6, 12, 2, 6, 14, 2, 6, 15, 2, 6, 18, 2, 8, 10, 2, 8, 12, 2, 8, 14, 2, 8, 15, 2, 8, 18, 2, 9, 10, 2, 9, 12, 2, 9, 14, 2, 9, 15, 2, 9, 18, 2, 11, 0, 2, 11, 10, 2, 11, 12, 2, 11, 14, 2, 11, 15, 2, 13, 0, 2, 13, 10, 2, 13, 12, 2, 13, 14, 2, 13, 15, 2, 17, 0, 3, 1, 3, 10, 3, 1, 3, 12, 3, 1, 3, 14, 3, 1, 3, 15, 3, 1, 3, 18, 3, 2, 7, 10, 3, 2, 7, 12, 3, 2, 7, 14, 3, 2, 7, 15, 3, 2, 7, 18, 0}
var _REPL_key_offsets = []int16{0, 0, 5, 12, 19, 23, 25, 28, 31, 33, 35, 39, 43, 45, 46, 52, 58, 65, 73, 79, 91, 98, 101, 110, 116, 122, 128, 134, 149, 156, 180, 204, 228, 237, 243, 249, 255, 261, 265, 267, 270, 273, 276, 278, 282, 284, 285, 291, 297, 304, 312, 318, 330, 337, 346, 352, 358, 364, 370, 374, 376, 379, 382, 385, 387, 402, 410, 412, 418, 422, 423, 429, 435, 442, 450, 456, 468, 475, 480, 504, 515, 539, 548, 572, 581, 605, 616, 630, 641, 660, 676, 691, 707, 723, 744, 760, 769, 774, 798, 803, 808, 815, 824, 831, 845, 857, 868, 880, 892, 909, 921, 932, 943, 956, 971, 985, 998, 1016, 1034, 1054, 1072, 1089, 1107, 1125, 1148, 0}
var _REPL_trans_keys = []byte{32, 9, 13, 97, 122, 34, 46, 57, 92, 120, 48, 49, 34, 46, 57, 92, 120, 48, 49, 43, 45, 48, 57, 48, 57, 41, 48, 57, 43, 48, 57, 48, 57, 48, 57, 69, 101, 48, 57, 43, 45, 48, 57, 48, 57, 45, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 45, 48, 57, 65, 70, 97, 102, 43, 45, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 45, 95, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 95, 48, 57, 65, 90, 97, 122, 41, 48, 57, 34, 47, 92, 98, 102, 110, 114, 116, 117, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 34, 40, 43, 45, 95, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 34, 46, 57, 92, 120, 48, 49, 32, 34, 40, 43, 44, 45, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 34, 40, 43, 44, 45, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 34, 40, 43, 44, 45, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 34, 47, 92, 98, 102, 110, 114, 116, 117, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 43, 45, 48, 57, 48, 57, 41, 48, 57, 41, 48, 57, 43, 48, 57, 48, 57, 43, 45, 48, 57, 48, 57, 45, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 45, 48, 57, 65, 70, 97, 102, 43, 45, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 45, 95, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 95, 48, 57, 65, 90, 97, 122, 34, 47, 92, 98, 102, 110, 114, 116, 117, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 43, 45, 48, 57, 48, 57, 41, 48, 57, 41, 48, 57, 43, 48, 57, 48, 57, 34, 40, 43, 45, 95, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 43, 45, 48, 57, 65, 70, 97, 102, 48, 57, 48, 57, 65, 70, 97, 102, 43, 45, 48, 57, 45, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 45, 48, 57, 65, 70, 97, 102, 43, 45, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 45, 95, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 95, 48, 57, 65, 90, 97, 122, 32, 9, 13, 97, 122, 32, 34, 40, 43, 44, 45, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 58, 91, 93, 123, 125, 9, 13, 46, 47, 32, 34, 40, 43, 44, 45, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 58, 91, 93, 123, 125, 9, 13, 32, 34, 40, 43, 44, 45, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 58, 91, 93, 123, 125, 9, 13, 32, 34, 40, 43, 44, 45, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 58, 91, 93, 123, 125, 9, 13, 48, 57, 32, 44, 46, 58, 69, 91, 93, 101, 123, 125, 9, 13, 48, 57, 32, 44, 58, 91, 93, 123, 125, 9, 13, 48, 57, 32, 44, 45, 46, 58, 69, 91, 93, 101, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 58, 91, 93, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 44, 58, 91, 93, 123, 125, 9, 13, 32, 9, 13, 46, 47, 32, 34, 40, 43, 44, 45, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 9, 13, 46, 47, 32, 9, 13, 46, 47, 32, 9, 13, 46, 47, 48, 57, 32, 69, 101, 9, 13, 46, 47, 48, 57, 32, 9, 13, 46, 47, 48, 57, 32, 45, 69, 101, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 45, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 45, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 45, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 45, 95, 9, 13, 46, 47, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 95, 9, 13, 46, 47, 48, 57, 65, 90, 97, 122, 32, 44, 58, 91, 93, 123, 125, 9, 13, 46, 47, 32, 44, 58, 91, 93, 123, 125, 9, 13, 46, 47, 32, 44, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 32, 44, 46, 47, 58, 69, 91, 93, 101, 123, 125, 9, 13, 48, 57, 32, 45, 69, 101, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 45, 46, 47, 58, 69, 91, 93, 101, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 95, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 58, 91, 93, 95, 123, 125, 9, 13, 46, 47, 48, 57, 65, 90, 97, 122, 0}
var _REPL_single_lengths = []int8{0, 1, 5, 5, 2, 0, 1, 1, 0, 0, 2, 2, 0, 1, 0, 0, 1, 2, 0, 2, 1, 1, 9, 0, 0, 0, 0, 5, 5, 12, 12, 12, 9, 0, 0, 0, 0, 2, 0, 1, 1, 1, 0, 2, 0, 1, 0, 0, 1, 2, 0, 2, 1, 9, 0, 0, 0, 0, 2, 0, 1, 1, 1, 0, 5, 2, 0, 0, 2, 1, 0, 0, 1, 2, 0, 2, 1, 1, 12, 7, 12, 7, 12, 7, 12, 7, 10, 7, 11, 8, 7, 8, 8, 9, 8, 7, 1, 12, 1, 1, 1, 3, 1, 4, 2, 1, 2, 2, 3, 2, 7, 7, 7, 11, 4, 7, 8, 8, 12, 8, 7, 8, 8, 9, 8, 0}
var _REPL_range_lengths = []int8{0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 3, 3, 3, 3, 3, 5, 3, 1, 0, 3, 3, 3, 3, 5, 1, 6, 6, 6, 0, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 0, 3, 3, 3, 3, 3, 5, 3, 0, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 5, 3, 1, 3, 1, 0, 3, 3, 3, 3, 3, 5, 3, 2, 6, 2, 6, 1, 6, 1, 6, 2, 2, 2, 4, 4, 4, 4, 4, 6, 4, 1, 2, 6, 2, 2, 3, 3, 3, 5, 5, 5, 5, 5, 7, 5, 2, 2, 3, 2, 5, 3, 5, 5, 4, 5, 5, 5, 5, 7, 5, 0}
var _REPL_index_offsets = []int16{0, 0, 4, 11, 18, 22, 24, 27, 30, 32, 34, 38, 42, 44, 46, 50, 54, 59, 65, 69, 77, 82, 85, 95, 99, 103, 107, 111, 122, 129, 148, 167, 186, 196, 200, 204, 208, 212, 216, 218, 221, 224, 227, 229, 233, 235, 237, 241, 245, 250, 256, 260, 268, 273, 283, 287, 291, 295, 299, 303, 305, 308, 311, 314, 316, 327, 333, 335, 339, 343, 345, 349, 353, 358, 364, 368, 376, 381, 385, 404, 414, 433, 442, 461, 470, 489, 499, 512, 522, 538, 551, 563, 576, 589, 605, 618, 627, 631, 650, 654, 658, 663, 670, 675, 685, 693, 700, 708, 716, 727, 735, 745, 755, 766, 780, 790, 801, 815, 829, 846, 860, 873, 887, 901, 918, 0}
var _REPL_cond_targs = []int8{1, 1, 77, 0, 79, 0, 0, 53, 0, 0, 2, 81, 0, 0, 22, 0, 0, 3, 5, 5, 21, 0, 6, 0, 83, 6, 0, 8, 86, 0, 85, 0, 10, 0, 11, 11, 10, 0, 12, 12, 87, 0, 87, 0, 8, 0, 89, 89, 89, 0, 90, 90, 90, 0, 14, 16, 16, 16, 0, 12, 18, 92, 16, 16, 0, 91, 89, 89, 0, 14, 94, 93, 93, 94, 93, 94, 0, 94, 94, 94, 94, 0, 95, 21, 0, 3, 3, 3, 3, 3, 3, 3, 3, 23, 0, 24, 24, 24, 0, 25, 25, 25, 0, 26, 26, 26, 0, 3, 3, 3, 0, 28, 37, 41, 45, 52, 103, 51, 52, 51, 52, 0, 96, 0, 0, 32, 0, 0, 28, 29, 3, 4, 7, 29, 13, 29, 29, 30, 20, 29, 31, 29, 88, 19, 20, 19, 20, 0, 29, 3, 4, 7, 29, 13, 29, 29, 30, 20, 29, 31, 29, 88, 19, 20, 19, 20, 0, 29, 3, 4, 7, 29, 13, 29, 29, 30, 20, 29, 31, 29, 88, 19, 20, 19, 20, 0, 28, 28, 28, 28, 28, 28, 28, 28, 33, 0, 34, 34, 34, 0, 35, 35, 35, 0, 36, 36, 36, 0, 28, 28, 28, 0, 38, 38, 40, 0, 39, 0, 98, 39, 0, 99, 40, 0, 42, 101, 0, 100, 0, 44, 44, 102, 0, 102, 0, 42, 0, 104, 104, 104, 0, 105, 105, 105, 0, 46, 48, 48, 48, 0, 44, 50, 107, 48, 48, 0, 106, 104, 104, 0, 46, 109, 108, 108, 109, 108, 109, 0, 109, 109, 109, 109, 0, 2, 2, 2, 2, 2, 2, 2, 2, 54, 0, 55, 55, 55, 0, 56, 56, 56, 0, 57, 57, 57, 0, 2, 2, 2, 0, 59, 59, 61, 0, 60, 0, 110, 60, 0, 111, 61, 0, 63, 113, 0, 112, 0, 28, 37, 41, 45, 52, 114, 51, 52, 51, 52, 0, 66, 67, 117, 48, 48, 0, 115, 0, 116, 104, 104, 0, 66, 66, 115, 0, 63, 0, 119, 119, 119, 0, 120, 120, 120, 0, 70, 72, 72, 72, 0, 66, 74, 122, 72, 72, 0, 121, 119, 119, 0, 70, 124, 123, 123, 124, 123, 124, 0, 124, 124, 124, 124, 0, 78, 78, 77, 0, 78, 2, 58, 62, 29, 69, 29, 29, 30, 76, 29, 31, 78, 118, 75, 76, 75, 76, 0, 80, 80, 80, 80, 82, 80, 84, 80, 27, 0, 80, 3, 4, 7, 80, 13, 80, 80, 82, 20, 80, 84, 80, 88, 19, 20, 19, 20, 0, 80, 80, 80, 80, 82, 80, 84, 80, 0, 80, 3, 4, 7, 80, 13, 80, 80, 82, 20, 80, 84, 80, 88, 19, 20, 19, 20, 0, 80, 80, 80, 80, 82, 80, 84, 80, 0, 80, 3, 4, 7, 80, 13, 80, 80, 82, 20, 80, 84, 80, 88, 19, 20, 19, 20, 0, 80, 80, 80, 80, 82, 80, 84, 80, 85, 0, 80, 80, 9, 80, 11, 80, 82, 11, 80, 84, 80, 86, 0, 80, 80, 80, 80, 82, 80, 84, 80, 87, 0, 80, 80, 14, 9, 80, 17, 80, 82, 17, 80, 84, 80, 88, 16, 16, 0, 80, 80, 15, 80, 80, 82, 80, 84, 80, 89, 89, 89, 0, 80, 80, 80, 80, 82, 80, 84, 80, 90, 90, 90, 0, 80, 80, 15, 80, 80, 82, 80, 84, 80, 91, 89, 89, 0, 80, 80, 14, 80, 80, 82, 80, 84, 80, 92, 16, 16, 0, 80, 80, 14, 80, 80, 82, 94, 80, 84, 80, 93, 93, 94, 93, 94, 0, 80, 80, 80, 80, 82, 94, 80, 84, 80, 94, 94, 94, 0, 80, 80, 80, 80, 82, 80, 84, 80, 0, 97, 97, 27, 0, 97, 3, 4, 7, 29, 13, 29, 29, 30, 20, 29, 31, 97, 88, 19, 20, 19, 20, 0, 97, 97, 27, 0, 97, 97, 27, 0, 97, 97, 27, 100, 0, 97, 43, 43, 97, 27, 101, 0, 97, 97, 27, 102, 0, 97, 46, 49, 49, 97, 27, 103, 48, 48, 0, 97, 47, 97, 27, 104, 104, 104, 0, 97, 97, 27, 105, 105, 105, 0, 97, 47, 97, 27, 106, 104, 104, 0, 97, 46, 97, 27, 107, 48, 48, 0, 97, 46, 109, 97, 27, 108, 108, 109, 108, 109, 0, 97, 109, 97, 27, 109, 109, 109, 0, 80, 80, 80, 80, 82, 80, 84, 80, 27, 0, 80, 80, 80, 80, 82, 80, 84, 80, 27, 0, 80, 80, 80, 80, 82, 80, 84, 80, 27, 112, 0, 80, 80, 64, 27, 80, 68, 80, 82, 68, 80, 84, 80, 113, 0, 97, 46, 65, 65, 97, 27, 114, 48, 48, 0, 80, 80, 80, 80, 82, 80, 84, 80, 27, 115, 0, 80, 80, 47, 80, 80, 82, 80, 84, 80, 27, 116, 104, 104, 0, 80, 80, 46, 80, 80, 82, 80, 84, 80, 27, 117, 48, 48, 0, 80, 80, 70, 64, 27, 80, 73, 80, 82, 73, 80, 84, 80, 118, 72, 72, 0, 80, 80, 71, 80, 80, 82, 80, 84, 80, 27, 119, 119, 119, 0, 80, 80, 80, 80, 82, 80, 84, 80, 27, 120, 120, 120, 0, 80, 80, 71, 80, 80, 82, 80, 84, 80, 27, 121, 119, 119, 0, 80, 80, 70, 80, 80, 82, 80, 84, 80, 27, 122, 72, 72, 0, 80, 80, 70, 80, 80, 82, 124, 80, 84, 80, 27, 123, 123, 124, 123, 124, 0, 80, 80, 80, 80, 82, 124, 80, 84, 80, 27, 124, 124, 124, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 0}
var _REPL_cond_actions = []int16{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 27, 1, 29, 23, 0, 1, 19, 0, 0, 1, 1, 1, 1, 1, 0, 25, 174, 174, 174, 183, 174, 186, 180, 25, 174, 177, 25, 25, 174, 174, 174, 174, 174, 0, 21, 159, 159, 159, 168, 159, 171, 165, 21, 159, 162, 21, 21, 159, 159, 159, 159, 159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 31, 0, 0, 0, 1, 1, 1, 27, 1, 29, 23, 0, 1, 19, 0, 0, 1, 1, 1, 1, 1, 0, 96, 90, 93, 87, 9, 84, 9, 96, 9, 0, 0, 1, 1, 1, 27, 1, 29, 23, 0, 1, 19, 0, 0, 1, 1, 1, 1, 1, 0, 9, 90, 93, 87, 9, 84, 9, 9, 0, 25, 174, 174, 174, 183, 174, 186, 180, 25, 174, 177, 25, 25, 174, 174, 174, 174, 174, 0, 15, 135, 138, 132, 15, 129, 15, 15, 0, 21, 159, 159, 159, 168, 159, 171, 165, 21, 159, 162, 21, 21, 159, 159, 159, 159, 159, 0, 17, 150, 153, 147, 17, 144, 17, 17, 0, 0, 51, 220, 0, 224, 0, 216, 51, 0, 212, 51, 51, 0, 0, 3, 42, 45, 39, 3, 36, 3, 3, 0, 0, 5, 60, 0, 0, 63, 0, 57, 5, 0, 54, 5, 5, 0, 0, 0, 0, 7, 75, 0, 78, 72, 7, 69, 7, 7, 0, 0, 0, 0, 7, 75, 78, 72, 7, 69, 7, 7, 0, 0, 0, 0, 33, 200, 0, 204, 196, 33, 192, 33, 33, 0, 0, 0, 0, 3, 42, 0, 45, 39, 3, 36, 3, 3, 0, 0, 0, 0, 11, 105, 0, 108, 102, 11, 0, 99, 11, 11, 0, 0, 0, 0, 0, 0, 11, 105, 108, 102, 11, 0, 99, 11, 11, 0, 0, 0, 0, 13, 120, 123, 117, 13, 114, 13, 13, 0, 96, 96, 9, 0, 0, 1, 1, 1, 27, 1, 29, 23, 0, 1, 19, 0, 0, 1, 1, 1, 1, 1, 0, 141, 141, 15, 0, 126, 126, 13, 0, 156, 156, 17, 0, 0, 228, 0, 0, 228, 51, 0, 0, 48, 48, 3, 0, 0, 66, 0, 0, 0, 66, 5, 0, 0, 0, 0, 81, 0, 81, 7, 0, 0, 0, 0, 81, 81, 7, 0, 0, 0, 0, 208, 0, 208, 33, 0, 0, 0, 0, 48, 0, 48, 3, 0, 0, 0, 0, 111, 0, 0, 111, 11, 0, 0, 0, 0, 0, 0, 111, 0, 111, 11, 0, 0, 0, 0, 141, 135, 138, 132, 15, 129, 15, 141, 15, 0, 126, 120, 123, 117, 13, 114, 13, 126, 13, 0, 156, 150, 153, 147, 17, 144, 17, 156, 17, 0, 0, 228, 220, 51, 51, 224, 0, 216, 51, 0, 212, 51, 228, 0, 0, 66, 0, 0, 0, 66, 5, 0, 0, 0, 0, 48, 42, 45, 39, 3, 36, 3, 48, 3, 0, 0, 208, 42, 0, 45, 39, 3, 36, 3, 208, 33, 0, 0, 0, 0, 48, 42, 0, 45, 39, 3, 36, 3, 48, 3, 0, 0, 0, 0, 66, 60, 0, 5, 5, 63, 0, 57, 5, 0, 54, 5, 66, 0, 0, 0, 0, 81, 75, 0, 78, 72, 7, 69, 7, 81, 7, 0, 0, 0, 0, 81, 75, 78, 72, 7, 69, 7, 81, 7, 0, 0, 0, 0, 208, 200, 0, 204, 196, 33, 192, 33, 208, 33, 0, 0, 0, 0, 48, 42, 0, 45, 39, 3, 36, 3, 48, 3, 0, 0, 0, 0, 111, 105, 0, 108, 102, 11, 0, 99, 11, 111, 11, 0, 0, 0, 0, 0, 0, 111, 105, 108, 102, 11, 0, 99, 11, 111, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 96, 0, 9, 25, 15, 21, 17, 51, 3, 5, 7, 7, 33, 3, 11, 11, 13, 96, 0, 141, 126, 156, 228, 48, 66, 81, 81, 208, 48, 111, 111, 141, 126, 156, 228, 66, 48, 208, 48, 66, 81, 81, 208, 48, 111, 111, 0}
var _REPL_eof_trans = []int16{933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 0}
var REPL_start int = 1
var _ = REPL_start
var REPL_first_final int = 77
var _ = REPL_first_final
var REPL_error int = 0
var _ = REPL_error
var REPL_en_main int = 1
var _ = REPL_en_main

func ParseREPL(data []byte) (cmd string, path *RDX, rdx *RDX, err error) {

	var mark [RdxMaxNesting]int
	nest, cs, p, pe, eof := 0, 0, 0, len(data), len(data)

	rdx = &RDX{}
	path = &RDX{RdxType: RdxPath}

	{
		cs = int(REPL_start)

	}
	{
		var _klen int
		var _trans uint = 0
		var _keys int
		var _acts int
		var _nacts uint
	_resume:
		{

		}
		if p == pe && p != eof {
			goto _out

		}
		if p == eof {
			if _REPL_eof_trans[cs] > 0 {
				_trans = uint(_REPL_eof_trans[cs]) - 1

			}

		} else {
			_keys = int(_REPL_key_offsets[cs])

			_trans = uint(_REPL_index_offsets[cs])
			_klen = int(_REPL_single_lengths[cs])
			if _klen > 0 {
				var _lower int = _keys
				var _upper int = _keys + _klen - 1
				var _mid int
				for {
					if _upper < _lower {
						_keys += _klen
						_trans += uint(_klen)
						break

					}
					_mid = _lower + ((_upper - _lower) >> 1)
					if (data[p]) < _REPL_trans_keys[_mid] {
						_upper = _mid - 1

					} else if (data[p]) > _REPL_trans_keys[_mid] {
						_lower = _mid + 1

					} else {
						_trans += uint((_mid - _keys))
						goto _match

					}

				}

			}
			_klen = int(_REPL_range_lengths[cs])
			if _klen > 0 {
				var _lower int = _keys
				var _upper int = _keys + (_klen << 1) - 2
				var _mid int
				for {
					if _upper < _lower {
						_trans += uint(_klen)
						break

					}
					_mid = _lower + (((_upper - _lower) >> 1) & ^1)
					if (data[p]) < _REPL_trans_keys[_mid] {
						_upper = _mid - 2

					} else if (data[p]) > _REPL_trans_keys[_mid+1] {
						_lower = _mid + 2

					} else {
						_trans += uint(((_mid - _keys) >> 1))
						break

					}

				}

			}
		_match:
			{

			}

		}
		cs = int(_REPL_cond_targs[_trans])
		if _REPL_cond_actions[_trans] != 0 {
			_acts = int(_REPL_cond_actions[_trans])

			_nacts = uint(_REPL_actions[_acts])
			_acts += 1
			for _nacts > 0 {
				switch _REPL_actions[_acts] {
				case 0:
					{
						mark[nest] = p
					}

				case 1:
					{
						rdx.RdxType = Float
						rdx.Text = data[mark[nest]:p]
					}

				case 2:
					{
						rdx.RdxType = Integer
						rdx.Text = data[mark[nest]:p]
					}

				case 3:
					{
						if rdx.RdxType != Integer {
							rdx.RdxType = Reference
						}
						rdx.Text = data[mark[nest]:p]
					}

				case 4:
					{
						rdx.RdxType = String
						rdx.Text = data[mark[nest]:p]
					}

				case 5:
					{
						rdx.RdxType = RdxName
						rdx.Text = data[mark[nest]:p]
					}

				case 6:
					{
						rdx.RdxType = NCounter
						rdx.Text = data[mark[nest]:p]
					}

				case 7:
					{
						rdx.RdxType = NInc
						rdx.Text = data[mark[nest]:p]
					}

				case 8:
					{
						rdx.RdxType = ZCounter
						rdx.Text = data[mark[nest]:p]
					}

				case 9:
					{
						rdx.RdxType = ZInc
						rdx.Text = data[mark[nest]:p]
					}

				case 10:
					{
						n := rdx.Nested
						n = append(n, RDX{Parent: rdx})
						rdx.Nested = n
						rdx.RdxType = Map
						rdx = &n[len(n)-1]
						nest++
					}

				case 11:
					{
						if rdx.Parent == nil {
							cs = _RDX_error
							{
								p += 1
								goto _out

							}

						}
						nest--
						rdx = rdx.Parent
						if rdx.RdxType != ESet && rdx.RdxType != Map && rdx.RdxType != RdxObject {
							cs = _RDX_error
							{
								p += 1
								goto _out

							}

						}
						if len(rdx.Nested) == 1 {
							rdx.RdxType = ESet
						}
						if rdx.RdxType == Map {
							if (len(rdx.Nested) & 1) == 1 {
								cs = _RDX_error
								{
									p += 1
									goto _out

								}

							}
						}
					}

				case 12:
					{
						n := rdx.Nested
						n = append(n, RDX{Parent: rdx})
						rdx.Nested = n
						rdx.RdxType = LArray
						rdx = &n[len(n)-1]
						nest++
					}

				case 13:
					{
						if rdx.Parent == nil {
							cs = _RDX_error
							{
								p += 1
								goto _out

							}

						}
						nest--
						rdx = rdx.Parent
						if rdx.RdxType != LArray {
							cs = _RDX_error
							{
								p += 1
								goto _out

							}

						}
					}

				case 14:
					{
						if rdx.Parent == nil {
							cs = _RDX_error
							{
								p += 1
								goto _out

							}

						}
						n := rdx.Parent.Nested
						if rdx.Parent.RdxType == Map {
							if len(n) == 1 {
								rdx.Parent.RdxType = ESet
							} else if (len(n) & 1) == 1 {
								cs = _RDX_error
								{
									p += 1
									goto _out

								}

							}
						}
						n = append(n, RDX{Parent: rdx.Parent})
						rdx.Parent.Nested = n
						rdx = &n[len(n)-1]
					}

				case 15:
					{
						if rdx.Parent == nil {
							cs = _RDX_error
							{
								p += 1
								goto _out

							}

						}
						n := rdx.Parent.Nested
						if rdx.Parent.RdxType == Map {
							if (len(n) & 1) == 0 {
								cs = _RDX_error
								{
									p += 1
									goto _out

								}

							}
						} else if rdx.Parent.RdxType == RdxObject {
							if (len(n) & 1) == 0 {
								cs = _RDX_error
								{
									p += 1
									goto _out

								}

							}
							if rdx.RdxType != RdxName {
								cs = _RDX_error
								{
									p += 1
									goto _out

								}

							}
						} else {
							cs = _RDX_error
							{
								p += 1
								goto _out

							}

						}
						n = append(n, RDX{Parent: rdx.Parent})
						rdx.Parent.Nested = n
						rdx = &n[len(n)-1]
					}

				case 16:
					{
						cmd = string(data[mark[0]:p])
					}

				case 17:
					{
						rdx.Parent = path
						path.Nested = append(path.Nested, *rdx)
						rdx = &RDX{}
					}

				case 18:
					{
						rdx.Parent = path
						path.Nested = append(path.Nested, *rdx)
						rdx = &RDX{}
					}

				}
				_nacts -= 1
				_acts += 1

			}

		}
		if p == eof {
			if cs >= 77 {
				goto _out

			}

		} else {
			if cs != 0 {
				p += 1
				goto _resume

			}

		}
	_out:
		{

		}

	}
	if cs < REPL_first_final {
		err = fmt.Errorf("command parsing failed at pos %d", p)
	}

	return

}
