package rdx

import (
	"fmt"
)

var _REPL_actions = []int8{0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 1, 10, 1, 11, 1, 13, 2, 1, 5, 2, 1, 7, 2, 1, 9, 2, 1, 10, 2, 1, 13, 2, 2, 5, 2, 2, 7, 2, 2, 9, 2, 2, 10, 2, 2, 13, 2, 3, 5, 2, 3, 7, 2, 3, 9, 2, 3, 10, 2, 3, 13, 2, 4, 5, 2, 4, 7, 2, 4, 9, 2, 4, 10, 2, 4, 13, 2, 6, 0, 2, 6, 5, 2, 6, 7, 2, 6, 9, 2, 6, 10, 2, 8, 0, 2, 8, 5, 2, 8, 7, 2, 8, 9, 2, 8, 10, 2, 12, 0, 0}
var _REPL_key_offsets = []int16{0, 0, 5, 12, 19, 21, 23, 27, 31, 33, 39, 45, 52, 60, 72, 79, 88, 94, 100, 106, 112, 126, 133, 156, 179, 202, 211, 217, 223, 229, 235, 237, 241, 243, 249, 255, 262, 270, 282, 289, 298, 304, 310, 316, 322, 324, 338, 346, 348, 354, 358, 364, 370, 377, 385, 397, 404, 409, 432, 443, 466, 475, 498, 512, 523, 546, 565, 581, 596, 612, 633, 649, 654, 677, 686, 693, 707, 719, 730, 742, 759, 771, 786, 800, 813, 831, 849, 869, 887, 904, 922, 945, 0}
var _REPL_trans_keys = []byte{32, 9, 13, 97, 122, 34, 46, 57, 92, 120, 48, 49, 34, 46, 57, 92, 120, 48, 49, 48, 57, 48, 57, 69, 101, 48, 57, 43, 45, 48, 57, 48, 57, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 45, 48, 57, 65, 70, 97, 102, 43, 45, 48, 57, 65, 70, 97, 102, 45, 95, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 95, 48, 57, 65, 90, 97, 122, 34, 47, 92, 98, 102, 110, 114, 116, 117, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 34, 43, 45, 95, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 34, 46, 57, 92, 120, 48, 49, 32, 34, 44, 58, 91, 93, 95, 123, 125, 9, 13, 43, 45, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 34, 44, 58, 91, 93, 95, 123, 125, 9, 13, 43, 45, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 34, 44, 58, 91, 93, 95, 123, 125, 9, 13, 43, 45, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 34, 47, 92, 98, 102, 110, 114, 116, 117, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 43, 45, 48, 57, 48, 57, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 45, 48, 57, 65, 70, 97, 102, 43, 45, 48, 57, 65, 70, 97, 102, 45, 95, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 95, 48, 57, 65, 90, 97, 122, 34, 47, 92, 98, 102, 110, 114, 116, 117, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 34, 43, 45, 95, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 43, 45, 48, 57, 65, 70, 97, 102, 48, 57, 48, 57, 65, 70, 97, 102, 43, 45, 48, 57, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 45, 48, 57, 65, 70, 97, 102, 43, 45, 48, 57, 65, 70, 97, 102, 45, 95, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 95, 48, 57, 65, 90, 97, 122, 32, 9, 13, 97, 122, 32, 34, 44, 58, 91, 93, 95, 123, 125, 9, 13, 43, 45, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 58, 91, 93, 123, 125, 9, 13, 46, 47, 32, 34, 44, 58, 91, 93, 95, 123, 125, 9, 13, 43, 45, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 58, 91, 93, 123, 125, 9, 13, 32, 34, 44, 58, 91, 93, 95, 123, 125, 9, 13, 43, 45, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 46, 58, 69, 91, 93, 101, 123, 125, 9, 13, 48, 57, 32, 44, 58, 91, 93, 123, 125, 9, 13, 48, 57, 32, 34, 44, 58, 91, 93, 95, 123, 125, 9, 13, 43, 45, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 45, 46, 58, 69, 91, 93, 101, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 58, 91, 93, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 9, 13, 46, 47, 32, 34, 44, 58, 91, 93, 95, 123, 125, 9, 13, 43, 45, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 69, 101, 9, 13, 46, 47, 48, 57, 32, 9, 13, 46, 47, 48, 57, 32, 45, 69, 101, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 45, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 45, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 45, 95, 9, 13, 46, 47, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 95, 9, 13, 46, 47, 48, 57, 65, 90, 97, 122, 32, 44, 46, 47, 58, 69, 91, 93, 101, 123, 125, 9, 13, 48, 57, 32, 45, 69, 101, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 45, 46, 47, 58, 69, 91, 93, 101, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 95, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 58, 91, 93, 95, 123, 125, 9, 13, 46, 47, 48, 57, 65, 90, 97, 122, 0}
var _REPL_single_lengths = []int8{0, 1, 5, 5, 0, 0, 2, 2, 0, 0, 0, 1, 2, 2, 1, 9, 0, 0, 0, 0, 4, 5, 9, 9, 9, 9, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 2, 2, 1, 9, 0, 0, 0, 0, 0, 4, 2, 0, 0, 2, 0, 0, 1, 2, 2, 1, 1, 9, 7, 9, 7, 9, 10, 7, 9, 11, 8, 7, 8, 9, 8, 1, 9, 3, 1, 4, 2, 1, 2, 3, 2, 11, 4, 7, 8, 8, 12, 8, 7, 8, 9, 8, 0}
var _REPL_range_lengths = []int8{0, 2, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 5, 3, 0, 3, 3, 3, 3, 5, 1, 7, 7, 7, 0, 3, 3, 3, 3, 1, 1, 1, 3, 3, 3, 3, 5, 3, 0, 3, 3, 3, 3, 1, 5, 3, 1, 3, 1, 3, 3, 3, 3, 5, 3, 2, 7, 2, 7, 1, 7, 2, 2, 7, 4, 4, 4, 4, 6, 4, 2, 7, 3, 3, 5, 5, 5, 5, 7, 5, 2, 5, 3, 5, 5, 4, 5, 5, 5, 7, 5, 0}
var _REPL_index_offsets = []int16{0, 0, 4, 11, 18, 20, 22, 26, 30, 32, 36, 40, 45, 51, 59, 64, 74, 78, 82, 86, 90, 100, 107, 124, 141, 158, 168, 172, 176, 180, 184, 186, 190, 192, 196, 200, 205, 211, 219, 224, 234, 238, 242, 246, 250, 252, 262, 268, 270, 274, 278, 282, 286, 291, 297, 305, 310, 314, 331, 341, 358, 367, 384, 397, 407, 424, 440, 453, 465, 478, 494, 507, 511, 528, 535, 540, 550, 558, 565, 573, 584, 592, 606, 616, 627, 641, 655, 672, 686, 699, 713, 730, 0}
var _REPL_cond_targs = []int8{1, 1, 56, 0, 58, 0, 0, 39, 0, 0, 2, 60, 0, 0, 15, 0, 0, 3, 62, 0, 6, 0, 7, 7, 6, 0, 8, 8, 63, 0, 63, 0, 66, 66, 66, 0, 67, 67, 67, 0, 9, 11, 11, 11, 0, 8, 9, 68, 11, 11, 0, 9, 70, 69, 69, 70, 69, 70, 0, 70, 70, 70, 70, 0, 3, 3, 3, 3, 3, 3, 3, 3, 16, 0, 17, 17, 17, 0, 18, 18, 18, 0, 19, 19, 19, 0, 3, 3, 3, 0, 21, 30, 30, 38, 75, 37, 38, 37, 38, 0, 71, 0, 0, 25, 0, 0, 21, 22, 3, 22, 22, 22, 23, 14, 22, 24, 22, 4, 65, 13, 14, 13, 14, 0, 22, 3, 22, 22, 22, 23, 14, 22, 24, 22, 4, 65, 13, 14, 13, 14, 0, 22, 3, 22, 22, 22, 23, 14, 22, 24, 22, 4, 65, 13, 14, 13, 14, 0, 21, 21, 21, 21, 21, 21, 21, 21, 26, 0, 27, 27, 27, 0, 28, 28, 28, 0, 29, 29, 29, 0, 21, 21, 21, 0, 73, 0, 32, 32, 74, 0, 74, 0, 76, 76, 76, 0, 77, 77, 77, 0, 33, 35, 35, 35, 0, 32, 33, 78, 35, 35, 0, 33, 80, 79, 79, 80, 79, 80, 0, 80, 80, 80, 80, 0, 2, 2, 2, 2, 2, 2, 2, 2, 40, 0, 41, 41, 41, 0, 42, 42, 42, 0, 43, 43, 43, 0, 2, 2, 2, 0, 81, 0, 21, 30, 30, 38, 82, 37, 38, 37, 38, 0, 47, 48, 85, 35, 35, 0, 83, 0, 84, 76, 76, 0, 47, 47, 83, 0, 87, 87, 87, 0, 88, 88, 88, 0, 50, 52, 52, 52, 0, 47, 50, 89, 52, 52, 0, 50, 91, 90, 90, 91, 90, 91, 0, 91, 91, 91, 91, 0, 57, 57, 56, 0, 57, 2, 22, 22, 22, 23, 55, 22, 24, 57, 44, 86, 54, 55, 54, 55, 0, 59, 59, 59, 59, 61, 59, 64, 59, 20, 0, 59, 3, 59, 59, 59, 61, 14, 59, 64, 59, 4, 65, 13, 14, 13, 14, 0, 59, 59, 59, 59, 61, 59, 64, 59, 0, 59, 3, 59, 59, 59, 61, 14, 59, 64, 59, 4, 65, 13, 14, 13, 14, 0, 59, 59, 5, 59, 7, 59, 61, 7, 59, 64, 59, 62, 0, 59, 59, 59, 59, 61, 59, 64, 59, 63, 0, 59, 3, 59, 59, 59, 61, 14, 59, 64, 59, 4, 65, 13, 14, 13, 14, 0, 59, 59, 9, 5, 59, 12, 59, 61, 12, 59, 64, 59, 65, 11, 11, 0, 59, 59, 10, 59, 59, 61, 59, 64, 59, 66, 66, 66, 0, 59, 59, 59, 59, 61, 59, 64, 59, 67, 67, 67, 0, 59, 59, 9, 59, 59, 61, 59, 64, 59, 68, 11, 11, 0, 59, 59, 9, 59, 59, 61, 70, 59, 64, 59, 69, 69, 70, 69, 70, 0, 59, 59, 59, 59, 61, 70, 59, 64, 59, 70, 70, 70, 0, 72, 72, 20, 0, 72, 3, 22, 22, 22, 23, 14, 22, 24, 72, 4, 65, 13, 14, 13, 14, 0, 72, 31, 31, 72, 20, 73, 0, 72, 72, 20, 74, 0, 72, 33, 36, 36, 72, 20, 75, 35, 35, 0, 72, 34, 72, 20, 76, 76, 76, 0, 72, 72, 20, 77, 77, 77, 0, 72, 33, 72, 20, 78, 35, 35, 0, 72, 33, 80, 72, 20, 79, 79, 80, 79, 80, 0, 72, 80, 72, 20, 80, 80, 80, 0, 59, 59, 45, 20, 59, 49, 59, 61, 49, 59, 64, 59, 81, 0, 72, 33, 46, 46, 72, 20, 82, 35, 35, 0, 59, 59, 59, 59, 61, 59, 64, 59, 20, 83, 0, 59, 59, 34, 59, 59, 61, 59, 64, 59, 20, 84, 76, 76, 0, 59, 59, 33, 59, 59, 61, 59, 64, 59, 20, 85, 35, 35, 0, 59, 59, 50, 45, 20, 59, 53, 59, 61, 53, 59, 64, 59, 86, 52, 52, 0, 59, 59, 51, 59, 59, 61, 59, 64, 59, 20, 87, 87, 87, 0, 59, 59, 59, 59, 61, 59, 64, 59, 20, 88, 88, 88, 0, 59, 59, 50, 59, 59, 61, 59, 64, 59, 20, 89, 52, 52, 0, 59, 59, 50, 59, 59, 61, 91, 59, 64, 59, 20, 90, 90, 91, 90, 91, 0, 59, 59, 59, 59, 61, 91, 59, 64, 59, 20, 91, 91, 91, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 0}
var _REPL_cond_actions = []int8{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 117, 117, 117, 117, 117, 117, 117, 117, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 19, 21, 15, 0, 1, 11, 0, 0, 1, 1, 1, 1, 1, 1, 0, 17, 102, 111, 114, 108, 17, 102, 105, 17, 17, 102, 102, 102, 102, 102, 102, 0, 13, 87, 96, 99, 93, 13, 87, 90, 13, 13, 87, 87, 87, 87, 87, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 117, 117, 117, 117, 117, 117, 117, 117, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 23, 0, 0, 0, 1, 19, 21, 15, 0, 1, 11, 0, 0, 1, 1, 1, 1, 1, 1, 0, 69, 63, 66, 60, 7, 57, 7, 69, 7, 0, 0, 1, 19, 21, 15, 0, 1, 11, 0, 0, 1, 1, 1, 1, 1, 1, 0, 7, 63, 66, 60, 7, 57, 7, 7, 0, 17, 102, 111, 114, 108, 17, 102, 105, 17, 17, 102, 102, 102, 102, 102, 102, 0, 3, 33, 0, 36, 0, 30, 3, 0, 27, 3, 3, 0, 0, 0, 19, 21, 15, 0, 11, 0, 0, 0, 0, 13, 87, 96, 99, 93, 13, 87, 90, 13, 13, 87, 87, 87, 87, 87, 87, 0, 3, 33, 0, 0, 36, 0, 30, 3, 0, 27, 3, 3, 0, 0, 0, 0, 5, 48, 0, 51, 45, 5, 42, 5, 5, 0, 0, 0, 0, 5, 48, 51, 45, 5, 42, 5, 5, 0, 0, 0, 0, 0, 19, 0, 21, 15, 0, 11, 0, 0, 0, 0, 0, 0, 9, 78, 0, 81, 75, 9, 0, 72, 9, 9, 0, 0, 0, 0, 0, 0, 9, 78, 81, 75, 9, 0, 72, 9, 9, 0, 0, 0, 0, 69, 69, 7, 0, 0, 1, 19, 21, 15, 0, 1, 11, 0, 0, 1, 1, 1, 1, 1, 1, 0, 39, 0, 0, 39, 3, 0, 0, 25, 25, 0, 0, 0, 39, 0, 0, 0, 39, 3, 0, 0, 0, 0, 54, 0, 54, 5, 0, 0, 0, 0, 54, 54, 5, 0, 0, 0, 0, 25, 0, 25, 0, 0, 0, 0, 0, 84, 0, 0, 84, 9, 0, 0, 0, 0, 0, 0, 84, 0, 84, 9, 0, 0, 0, 0, 39, 33, 3, 3, 36, 0, 30, 3, 0, 27, 3, 39, 0, 0, 39, 0, 0, 0, 39, 3, 0, 0, 0, 0, 25, 19, 21, 15, 0, 11, 0, 25, 0, 0, 0, 54, 19, 0, 21, 15, 0, 11, 0, 54, 5, 0, 0, 0, 0, 25, 19, 0, 21, 15, 0, 11, 0, 25, 0, 0, 0, 0, 0, 39, 33, 0, 3, 3, 36, 0, 30, 3, 0, 27, 3, 39, 0, 0, 0, 0, 54, 48, 0, 51, 45, 5, 42, 5, 54, 5, 0, 0, 0, 0, 54, 48, 51, 45, 5, 42, 5, 54, 5, 0, 0, 0, 0, 25, 19, 0, 21, 15, 0, 11, 0, 25, 0, 0, 0, 0, 0, 84, 78, 0, 81, 75, 9, 0, 72, 9, 84, 9, 0, 0, 0, 0, 0, 0, 84, 78, 81, 75, 9, 0, 72, 9, 84, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 69, 0, 7, 17, 3, 0, 13, 3, 5, 5, 0, 9, 9, 69, 0, 39, 25, 39, 54, 54, 25, 84, 84, 39, 39, 25, 54, 25, 39, 54, 54, 25, 84, 84, 0}
var _REPL_eof_trans = []int16{745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 0}
var REPL_start int = 1
var _ = REPL_start
var REPL_first_final int = 56
var _ = REPL_first_final
var REPL_error int = 0
var _ = REPL_error
var REPL_en_main int = 1
var _ = REPL_en_main

func ParseREPL(data []byte) (cmd string, path *RDX, rdx *RDX, err error) {

	var mark [RdxMaxNesting]int
	nest, cs, p, pe, eof := 0, 0, 0, len(data), len(data)

	rdx = &RDX{}
	path = &RDX{RdxType: RdxPath}

	{
		cs = int(REPL_start)

	}
	{
		var _klen int
		var _trans uint = 0
		var _keys int
		var _acts int
		var _nacts uint
	_resume:
		{

		}
		if p == pe && p != eof {
			goto _out

		}
		if p == eof {
			if _REPL_eof_trans[cs] > 0 {
				_trans = uint(_REPL_eof_trans[cs]) - 1

			}

		} else {
			_keys = int(_REPL_key_offsets[cs])

			_trans = uint(_REPL_index_offsets[cs])
			_klen = int(_REPL_single_lengths[cs])
			if _klen > 0 {
				var _lower int = _keys
				var _upper int = _keys + _klen - 1
				var _mid int
				for {
					if _upper < _lower {
						_keys += _klen
						_trans += uint(_klen)
						break

					}
					_mid = _lower + ((_upper - _lower) >> 1)
					if (data[p]) < _REPL_trans_keys[_mid] {
						_upper = _mid - 1

					} else if (data[p]) > _REPL_trans_keys[_mid] {
						_lower = _mid + 1

					} else {
						_trans += uint((_mid - _keys))
						goto _match

					}

				}

			}
			_klen = int(_REPL_range_lengths[cs])
			if _klen > 0 {
				var _lower int = _keys
				var _upper int = _keys + (_klen << 1) - 2
				var _mid int
				for {
					if _upper < _lower {
						_trans += uint(_klen)
						break

					}
					_mid = _lower + (((_upper - _lower) >> 1) & ^1)
					if (data[p]) < _REPL_trans_keys[_mid] {
						_upper = _mid - 2

					} else if (data[p]) > _REPL_trans_keys[_mid+1] {
						_lower = _mid + 2

					} else {
						_trans += uint(((_mid - _keys) >> 1))
						break

					}

				}

			}
		_match:
			{

			}

		}
		cs = int(_REPL_cond_targs[_trans])
		if _REPL_cond_actions[_trans] != 0 {
			_acts = int(_REPL_cond_actions[_trans])

			_nacts = uint(_REPL_actions[_acts])
			_acts += 1
			for _nacts > 0 {
				switch _REPL_actions[_acts] {
				case 0:
					{
						mark[nest] = p
					}

				case 1:
					{
						rdx.RdxType = RdxInt
						rdx.Text = data[mark[nest]:p]
					}

				case 2:
					{
						if rdx.RdxType != RdxInt {
							rdx.RdxType = RdxRef
						}
						rdx.Text = data[mark[nest]:p]
					}

				case 3:
					{
						rdx.RdxType = RdxString
						rdx.Text = data[mark[nest]:p]
					}

				case 4:
					{
						rdx.RdxType = RdxName
						rdx.Text = data[mark[nest]:p]
					}

				case 5:
					{
						n := rdx.Nested
						n = append(n, RDX{Parent: rdx})
						rdx.Nested = n
						rdx.RdxType = RdxMap
						rdx = &n[len(n)-1]
						nest++
					}

				case 6:
					{
						nest--
						rdx = rdx.Parent
					}

				case 7:
					{
						n := rdx.Nested
						n = append(n, RDX{Parent: rdx})
						rdx.Nested = n
						rdx.RdxType = RdxArray
						rdx = &n[len(n)-1]
						nest++
					}

				case 8:
					{
						nest--
						rdx = rdx.Parent
					}

				case 9:
					{
						if rdx.Parent == nil {
							{
								p += 1
								goto _out

							}

						}
						n := rdx.Parent.Nested
						if len(n) == 1 && rdx.Parent.RdxType == RdxMap {
							rdx.Parent.RdxType = RdxSet
						}
						if 1 == (len(n)&1) && rdx.Parent.RdxType == RdxMap {
							{
								p += 1
								goto _out

							}

						}
						n = append(n, RDX{Parent: rdx.Parent})
						rdx.Parent.Nested = n
						rdx = &n[len(n)-1]
					}

				case 10:
					{
						n := rdx.Parent.Nested
						n = append(n, RDX{Parent: rdx.Parent})
						rdx.Parent.Nested = n
						rdx = &n[len(n)-1]
					}

				case 11:
					{
						cmd = string(data[mark[0]:p])
					}

				case 12:
					{
						rdx.Parent = path
						path.Nested = append(path.Nested, *rdx)
						rdx = &RDX{}
					}

				case 13:
					{
						rdx.Parent = path
						path.Nested = append(path.Nested, *rdx)
						rdx = &RDX{}
					}

				}
				_nacts -= 1
				_acts += 1

			}

		}
		if p == eof {
			if cs >= 56 {
				goto _out

			}

		} else {
			if cs != 0 {
				p += 1
				goto _resume

			}

		}
	_out:
		{

		}

	}
	if cs < REPL_first_final {
		err = fmt.Errorf("command parsing failed at pos %d", p)
	}

	return

}
