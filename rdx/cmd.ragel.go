package rdx

import (
	"fmt"
)

var _REPL_actions = []int8{0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 2, 1, 3, 2, 1, 10, 2, 1, 12, 2, 1, 14, 2, 1, 15, 2, 1, 18, 2, 2, 10, 2, 2, 12, 2, 2, 14, 2, 2, 15, 2, 2, 18, 2, 3, 10, 2, 3, 12, 2, 3, 14, 2, 3, 15, 2, 3, 18, 2, 4, 10, 2, 4, 12, 2, 4, 14, 2, 4, 15, 2, 4, 18, 2, 5, 10, 2, 5, 12, 2, 5, 14, 2, 5, 15, 2, 5, 18, 2, 6, 10, 2, 6, 12, 2, 6, 14, 2, 6, 15, 2, 6, 18, 2, 7, 10, 2, 7, 12, 2, 7, 14, 2, 7, 15, 2, 7, 18, 2, 8, 10, 2, 8, 12, 2, 8, 14, 2, 8, 15, 2, 8, 18, 2, 9, 10, 2, 9, 12, 2, 9, 14, 2, 9, 15, 2, 9, 18, 2, 11, 0, 2, 11, 10, 2, 11, 12, 2, 11, 14, 2, 11, 15, 2, 13, 0, 2, 13, 10, 2, 13, 12, 2, 13, 14, 2, 13, 15, 2, 17, 0, 3, 1, 3, 10, 3, 1, 3, 12, 3, 1, 3, 14, 3, 1, 3, 15, 3, 1, 3, 18, 0}
var _REPL_key_offsets = []int16{0, 0, 5, 12, 19, 23, 25, 28, 31, 33, 36, 38, 42, 46, 48, 54, 60, 67, 75, 81, 93, 100, 103, 112, 118, 124, 130, 136, 151, 158, 182, 206, 230, 239, 245, 251, 257, 263, 267, 269, 272, 275, 278, 280, 283, 287, 289, 295, 301, 308, 316, 322, 334, 341, 350, 356, 362, 368, 374, 378, 380, 383, 386, 389, 391, 394, 409, 417, 419, 425, 429, 435, 441, 448, 456, 462, 474, 481, 486, 510, 521, 545, 554, 578, 587, 611, 622, 633, 647, 658, 677, 693, 708, 724, 740, 761, 777, 786, 791, 815, 820, 825, 832, 839, 848, 855, 869, 881, 892, 904, 916, 933, 945, 956, 967, 980, 993, 1008, 1022, 1035, 1053, 1071, 1091, 1109, 1126, 1144, 1162, 1185, 0}
var _REPL_trans_keys = []byte{32, 9, 13, 97, 122, 34, 46, 57, 92, 120, 48, 49, 34, 46, 57, 92, 120, 48, 49, 43, 45, 48, 57, 48, 57, 41, 48, 57, 43, 48, 57, 48, 57, 45, 48, 57, 48, 57, 69, 101, 48, 57, 43, 45, 48, 57, 48, 57, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 45, 48, 57, 65, 70, 97, 102, 43, 45, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 45, 95, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 95, 48, 57, 65, 90, 97, 122, 41, 48, 57, 34, 47, 92, 98, 102, 110, 114, 116, 117, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 34, 40, 43, 45, 95, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 34, 46, 57, 92, 120, 48, 49, 32, 34, 40, 43, 44, 45, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 34, 40, 43, 44, 45, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 34, 40, 43, 44, 45, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 34, 47, 92, 98, 102, 110, 114, 116, 117, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 43, 45, 48, 57, 48, 57, 41, 48, 57, 41, 48, 57, 43, 48, 57, 48, 57, 45, 48, 57, 43, 45, 48, 57, 48, 57, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 45, 48, 57, 65, 70, 97, 102, 43, 45, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 45, 95, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 95, 48, 57, 65, 90, 97, 122, 34, 47, 92, 98, 102, 110, 114, 116, 117, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 43, 45, 48, 57, 48, 57, 41, 48, 57, 41, 48, 57, 43, 48, 57, 48, 57, 45, 48, 57, 34, 40, 43, 45, 95, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 43, 45, 48, 57, 65, 70, 97, 102, 48, 57, 48, 57, 65, 70, 97, 102, 43, 45, 48, 57, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 45, 48, 57, 65, 70, 97, 102, 43, 45, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 45, 95, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 95, 48, 57, 65, 90, 97, 122, 32, 9, 13, 97, 122, 32, 34, 40, 43, 44, 45, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 58, 91, 93, 123, 125, 9, 13, 46, 47, 32, 34, 40, 43, 44, 45, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 58, 91, 93, 123, 125, 9, 13, 32, 34, 40, 43, 44, 45, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 58, 91, 93, 123, 125, 9, 13, 32, 34, 40, 43, 44, 45, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 58, 91, 93, 123, 125, 9, 13, 48, 57, 32, 44, 58, 91, 93, 123, 125, 9, 13, 48, 57, 32, 44, 46, 58, 69, 91, 93, 101, 123, 125, 9, 13, 48, 57, 32, 44, 58, 91, 93, 123, 125, 9, 13, 48, 57, 32, 44, 45, 46, 58, 69, 91, 93, 101, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 58, 91, 93, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 44, 58, 91, 93, 123, 125, 9, 13, 32, 9, 13, 46, 47, 32, 34, 40, 43, 44, 45, 58, 91, 93, 95, 123, 125, 9, 13, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 9, 13, 46, 47, 32, 9, 13, 46, 47, 32, 9, 13, 46, 47, 48, 57, 32, 9, 13, 46, 47, 48, 57, 32, 69, 101, 9, 13, 46, 47, 48, 57, 32, 9, 13, 46, 47, 48, 57, 32, 45, 69, 101, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 45, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 45, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 45, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 45, 95, 9, 13, 46, 47, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 95, 9, 13, 46, 47, 48, 57, 65, 90, 97, 122, 32, 44, 58, 91, 93, 123, 125, 9, 13, 46, 47, 32, 44, 58, 91, 93, 123, 125, 9, 13, 46, 47, 32, 44, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 32, 44, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 32, 44, 46, 47, 58, 69, 91, 93, 101, 123, 125, 9, 13, 48, 57, 32, 45, 69, 101, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 45, 46, 47, 58, 69, 91, 93, 101, 123, 125, 9, 13, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 97, 102, 32, 44, 45, 58, 91, 93, 95, 123, 125, 9, 13, 46, 47, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 44, 58, 91, 93, 95, 123, 125, 9, 13, 46, 47, 48, 57, 65, 90, 97, 122, 0}
var _REPL_single_lengths = []int8{0, 1, 5, 5, 2, 0, 1, 1, 0, 1, 0, 2, 2, 0, 0, 0, 1, 2, 0, 2, 1, 1, 9, 0, 0, 0, 0, 5, 5, 12, 12, 12, 9, 0, 0, 0, 0, 2, 0, 1, 1, 1, 0, 1, 2, 0, 0, 0, 1, 2, 0, 2, 1, 9, 0, 0, 0, 0, 2, 0, 1, 1, 1, 0, 1, 5, 2, 0, 0, 2, 0, 0, 1, 2, 0, 2, 1, 1, 12, 7, 12, 7, 12, 7, 12, 7, 7, 10, 7, 11, 8, 7, 8, 8, 9, 8, 7, 1, 12, 1, 1, 1, 1, 3, 1, 4, 2, 1, 2, 2, 3, 2, 7, 7, 7, 7, 11, 4, 7, 8, 8, 12, 8, 7, 8, 8, 9, 8, 0}
var _REPL_range_lengths = []int8{0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 5, 3, 1, 0, 3, 3, 3, 3, 5, 1, 6, 6, 6, 0, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 5, 3, 0, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 5, 3, 1, 3, 1, 3, 3, 3, 3, 3, 5, 3, 2, 6, 2, 6, 1, 6, 1, 6, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 4, 1, 2, 6, 2, 2, 3, 3, 3, 3, 5, 5, 5, 5, 5, 7, 5, 2, 2, 3, 3, 2, 5, 3, 5, 5, 4, 5, 5, 5, 5, 7, 5, 0}
var _REPL_index_offsets = []int16{0, 0, 4, 11, 18, 22, 24, 27, 30, 32, 35, 37, 41, 45, 47, 51, 55, 60, 66, 70, 78, 83, 86, 96, 100, 104, 108, 112, 123, 130, 149, 168, 187, 197, 201, 205, 209, 213, 217, 219, 222, 225, 228, 230, 233, 237, 239, 243, 247, 252, 258, 262, 270, 275, 285, 289, 293, 297, 301, 305, 307, 310, 313, 316, 318, 321, 332, 338, 340, 344, 348, 352, 356, 361, 367, 371, 379, 384, 388, 407, 417, 436, 445, 464, 473, 492, 502, 512, 525, 535, 551, 564, 576, 589, 602, 618, 631, 640, 644, 663, 667, 671, 676, 681, 688, 693, 703, 711, 718, 726, 734, 745, 753, 763, 773, 784, 795, 809, 819, 830, 844, 858, 875, 889, 902, 916, 930, 947, 0}
var _REPL_cond_targs = []int8{1, 1, 77, 0, 79, 0, 0, 53, 0, 0, 2, 81, 0, 0, 22, 0, 0, 3, 5, 5, 21, 0, 6, 0, 83, 6, 0, 8, 86, 0, 85, 0, 8, 87, 0, 11, 0, 12, 12, 11, 0, 13, 13, 88, 0, 88, 0, 90, 90, 90, 0, 91, 91, 91, 0, 14, 16, 16, 16, 0, 13, 18, 93, 16, 16, 0, 92, 90, 90, 0, 14, 95, 94, 94, 95, 94, 95, 0, 95, 95, 95, 95, 0, 96, 21, 0, 3, 3, 3, 3, 3, 3, 3, 3, 23, 0, 24, 24, 24, 0, 25, 25, 25, 0, 26, 26, 26, 0, 3, 3, 3, 0, 28, 37, 41, 43, 52, 105, 51, 52, 51, 52, 0, 97, 0, 0, 32, 0, 0, 28, 29, 3, 4, 7, 29, 9, 29, 29, 30, 20, 29, 31, 29, 89, 19, 20, 19, 20, 0, 29, 3, 4, 7, 29, 9, 29, 29, 30, 20, 29, 31, 29, 89, 19, 20, 19, 20, 0, 29, 3, 4, 7, 29, 9, 29, 29, 30, 20, 29, 31, 29, 89, 19, 20, 19, 20, 0, 28, 28, 28, 28, 28, 28, 28, 28, 33, 0, 34, 34, 34, 0, 35, 35, 35, 0, 36, 36, 36, 0, 28, 28, 28, 0, 38, 38, 40, 0, 39, 0, 99, 39, 0, 100, 40, 0, 42, 102, 0, 101, 0, 42, 103, 0, 45, 45, 104, 0, 104, 0, 106, 106, 106, 0, 107, 107, 107, 0, 46, 48, 48, 48, 0, 45, 50, 109, 48, 48, 0, 108, 106, 106, 0, 46, 111, 110, 110, 111, 110, 111, 0, 111, 111, 111, 111, 0, 2, 2, 2, 2, 2, 2, 2, 2, 54, 0, 55, 55, 55, 0, 56, 56, 56, 0, 57, 57, 57, 0, 2, 2, 2, 0, 59, 59, 61, 0, 60, 0, 112, 60, 0, 113, 61, 0, 63, 115, 0, 114, 0, 63, 116, 0, 28, 37, 41, 43, 52, 117, 51, 52, 51, 52, 0, 67, 68, 120, 48, 48, 0, 118, 0, 119, 106, 106, 0, 67, 67, 118, 0, 122, 122, 122, 0, 123, 123, 123, 0, 70, 72, 72, 72, 0, 67, 74, 125, 72, 72, 0, 124, 122, 122, 0, 70, 127, 126, 126, 127, 126, 127, 0, 127, 127, 127, 127, 0, 78, 78, 77, 0, 78, 2, 58, 62, 29, 64, 29, 29, 30, 76, 29, 31, 78, 121, 75, 76, 75, 76, 0, 80, 80, 80, 80, 82, 80, 84, 80, 27, 0, 80, 3, 4, 7, 80, 9, 80, 80, 82, 20, 80, 84, 80, 89, 19, 20, 19, 20, 0, 80, 80, 80, 80, 82, 80, 84, 80, 0, 80, 3, 4, 7, 80, 9, 80, 80, 82, 20, 80, 84, 80, 89, 19, 20, 19, 20, 0, 80, 80, 80, 80, 82, 80, 84, 80, 0, 80, 3, 4, 7, 80, 9, 80, 80, 82, 20, 80, 84, 80, 89, 19, 20, 19, 20, 0, 80, 80, 80, 80, 82, 80, 84, 80, 85, 0, 80, 80, 80, 80, 82, 80, 84, 80, 86, 0, 80, 80, 10, 80, 12, 80, 82, 12, 80, 84, 80, 87, 0, 80, 80, 80, 80, 82, 80, 84, 80, 88, 0, 80, 80, 14, 10, 80, 17, 80, 82, 17, 80, 84, 80, 89, 16, 16, 0, 80, 80, 15, 80, 80, 82, 80, 84, 80, 90, 90, 90, 0, 80, 80, 80, 80, 82, 80, 84, 80, 91, 91, 91, 0, 80, 80, 15, 80, 80, 82, 80, 84, 80, 92, 90, 90, 0, 80, 80, 14, 80, 80, 82, 80, 84, 80, 93, 16, 16, 0, 80, 80, 14, 80, 80, 82, 95, 80, 84, 80, 94, 94, 95, 94, 95, 0, 80, 80, 80, 80, 82, 95, 80, 84, 80, 95, 95, 95, 0, 80, 80, 80, 80, 82, 80, 84, 80, 0, 98, 98, 27, 0, 98, 3, 4, 7, 29, 9, 29, 29, 30, 20, 29, 31, 98, 89, 19, 20, 19, 20, 0, 98, 98, 27, 0, 98, 98, 27, 0, 98, 98, 27, 101, 0, 98, 98, 27, 102, 0, 98, 44, 44, 98, 27, 103, 0, 98, 98, 27, 104, 0, 98, 46, 49, 49, 98, 27, 105, 48, 48, 0, 98, 47, 98, 27, 106, 106, 106, 0, 98, 98, 27, 107, 107, 107, 0, 98, 47, 98, 27, 108, 106, 106, 0, 98, 46, 98, 27, 109, 48, 48, 0, 98, 46, 111, 98, 27, 110, 110, 111, 110, 111, 0, 98, 111, 98, 27, 111, 111, 111, 0, 80, 80, 80, 80, 82, 80, 84, 80, 27, 0, 80, 80, 80, 80, 82, 80, 84, 80, 27, 0, 80, 80, 80, 80, 82, 80, 84, 80, 27, 114, 0, 80, 80, 80, 80, 82, 80, 84, 80, 27, 115, 0, 80, 80, 65, 27, 80, 69, 80, 82, 69, 80, 84, 80, 116, 0, 98, 46, 66, 66, 98, 27, 117, 48, 48, 0, 80, 80, 80, 80, 82, 80, 84, 80, 27, 118, 0, 80, 80, 47, 80, 80, 82, 80, 84, 80, 27, 119, 106, 106, 0, 80, 80, 46, 80, 80, 82, 80, 84, 80, 27, 120, 48, 48, 0, 80, 80, 70, 65, 27, 80, 73, 80, 82, 73, 80, 84, 80, 121, 72, 72, 0, 80, 80, 71, 80, 80, 82, 80, 84, 80, 27, 122, 122, 122, 0, 80, 80, 80, 80, 82, 80, 84, 80, 27, 123, 123, 123, 0, 80, 80, 71, 80, 80, 82, 80, 84, 80, 27, 124, 122, 122, 0, 80, 80, 70, 80, 80, 82, 80, 84, 80, 27, 125, 72, 72, 0, 80, 80, 70, 80, 80, 82, 127, 80, 84, 80, 27, 126, 126, 127, 126, 127, 0, 80, 80, 80, 80, 82, 127, 80, 84, 80, 27, 127, 127, 127, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 0}
var _REPL_cond_actions = []int16{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 29, 1, 31, 25, 0, 1, 21, 0, 0, 1, 1, 1, 1, 1, 0, 27, 188, 188, 188, 197, 188, 200, 194, 27, 188, 191, 27, 27, 188, 188, 188, 188, 188, 0, 23, 173, 173, 173, 182, 173, 185, 179, 23, 173, 176, 23, 23, 173, 173, 173, 173, 173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 33, 0, 0, 0, 1, 1, 1, 29, 1, 31, 25, 0, 1, 21, 0, 0, 1, 1, 1, 1, 1, 0, 95, 89, 92, 86, 9, 83, 9, 95, 9, 0, 0, 1, 1, 1, 29, 1, 31, 25, 0, 1, 21, 0, 0, 1, 1, 1, 1, 1, 0, 9, 89, 92, 86, 9, 83, 9, 9, 0, 27, 188, 188, 188, 197, 188, 200, 194, 27, 188, 191, 27, 27, 188, 188, 188, 188, 188, 0, 17, 149, 152, 146, 17, 143, 17, 17, 0, 23, 173, 173, 173, 182, 173, 185, 179, 23, 173, 176, 23, 23, 173, 173, 173, 173, 173, 0, 19, 164, 167, 161, 19, 158, 19, 19, 0, 0, 15, 134, 137, 131, 15, 128, 15, 15, 0, 0, 5, 59, 0, 62, 0, 56, 5, 0, 53, 5, 5, 0, 0, 3, 44, 47, 41, 3, 38, 3, 3, 0, 0, 5, 59, 0, 0, 62, 0, 56, 5, 0, 53, 5, 5, 0, 0, 0, 0, 7, 74, 0, 77, 71, 7, 68, 7, 7, 0, 0, 0, 0, 7, 74, 77, 71, 7, 68, 7, 7, 0, 0, 0, 0, 35, 214, 0, 218, 210, 35, 206, 35, 35, 0, 0, 0, 0, 3, 44, 0, 47, 41, 3, 38, 3, 3, 0, 0, 0, 0, 11, 104, 0, 107, 101, 11, 0, 98, 11, 11, 0, 0, 0, 0, 0, 0, 11, 104, 107, 101, 11, 0, 98, 11, 11, 0, 0, 0, 0, 13, 119, 122, 116, 13, 113, 13, 13, 0, 95, 95, 9, 0, 0, 1, 1, 1, 29, 1, 31, 25, 0, 1, 21, 0, 0, 1, 1, 1, 1, 1, 0, 155, 155, 17, 0, 125, 125, 13, 0, 170, 170, 19, 0, 0, 140, 140, 15, 0, 0, 65, 0, 0, 65, 5, 0, 0, 50, 50, 3, 0, 0, 65, 0, 0, 0, 65, 5, 0, 0, 0, 0, 80, 0, 80, 7, 0, 0, 0, 0, 80, 80, 7, 0, 0, 0, 0, 222, 0, 222, 35, 0, 0, 0, 0, 50, 0, 50, 3, 0, 0, 0, 0, 110, 0, 0, 110, 11, 0, 0, 0, 0, 0, 0, 110, 0, 110, 11, 0, 0, 0, 0, 155, 149, 152, 146, 17, 143, 17, 155, 17, 0, 125, 119, 122, 116, 13, 113, 13, 125, 13, 0, 170, 164, 167, 161, 19, 158, 19, 170, 19, 0, 0, 140, 134, 137, 131, 15, 128, 15, 140, 15, 0, 0, 65, 59, 5, 5, 62, 0, 56, 5, 0, 53, 5, 65, 0, 0, 65, 0, 0, 0, 65, 5, 0, 0, 0, 0, 50, 44, 47, 41, 3, 38, 3, 50, 3, 0, 0, 222, 44, 0, 47, 41, 3, 38, 3, 222, 35, 0, 0, 0, 0, 50, 44, 0, 47, 41, 3, 38, 3, 50, 3, 0, 0, 0, 0, 65, 59, 0, 5, 5, 62, 0, 56, 5, 0, 53, 5, 65, 0, 0, 0, 0, 80, 74, 0, 77, 71, 7, 68, 7, 80, 7, 0, 0, 0, 0, 80, 74, 77, 71, 7, 68, 7, 80, 7, 0, 0, 0, 0, 222, 214, 0, 218, 210, 35, 206, 35, 222, 35, 0, 0, 0, 0, 50, 44, 0, 47, 41, 3, 38, 3, 50, 3, 0, 0, 0, 0, 110, 104, 0, 107, 101, 11, 0, 98, 11, 110, 11, 0, 0, 0, 0, 0, 0, 110, 104, 107, 101, 11, 0, 98, 11, 110, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 95, 0, 9, 27, 17, 23, 19, 15, 5, 3, 5, 7, 7, 35, 3, 11, 11, 13, 95, 0, 155, 125, 170, 140, 65, 50, 65, 80, 80, 222, 50, 110, 110, 155, 125, 170, 140, 65, 65, 50, 222, 50, 65, 80, 80, 222, 50, 110, 110, 0}
var _REPL_eof_trans = []int16{962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 0}
var REPL_start int = 1
var _ = REPL_start
var REPL_first_final int = 77
var _ = REPL_first_final
var REPL_error int = 0
var _ = REPL_error
var REPL_en_main int = 1
var _ = REPL_en_main

func ParseREPL(data []byte) (cmd string, path *RDX, rdx *RDX, err error) {

	var mark [RdxMaxNesting]int
	nest, cs, p, pe, eof := 0, 0, 0, len(data), len(data)

	rdx = &RDX{}
	path = &RDX{RdxType: RdxPath}

	{
		cs = int(REPL_start)

	}
	{
		var _klen int
		var _trans uint = 0
		var _keys int
		var _acts int
		var _nacts uint
	_resume:
		{

		}
		if p == pe && p != eof {
			goto _out

		}
		if p == eof {
			if _REPL_eof_trans[cs] > 0 {
				_trans = uint(_REPL_eof_trans[cs]) - 1

			}

		} else {
			_keys = int(_REPL_key_offsets[cs])

			_trans = uint(_REPL_index_offsets[cs])
			_klen = int(_REPL_single_lengths[cs])
			if _klen > 0 {
				var _lower int = _keys
				var _upper int = _keys + _klen - 1
				var _mid int
				for {
					if _upper < _lower {
						_keys += _klen
						_trans += uint(_klen)
						break

					}
					_mid = _lower + ((_upper - _lower) >> 1)
					if (data[p]) < _REPL_trans_keys[_mid] {
						_upper = _mid - 1

					} else if (data[p]) > _REPL_trans_keys[_mid] {
						_lower = _mid + 1

					} else {
						_trans += uint((_mid - _keys))
						goto _match

					}

				}

			}
			_klen = int(_REPL_range_lengths[cs])
			if _klen > 0 {
				var _lower int = _keys
				var _upper int = _keys + (_klen << 1) - 2
				var _mid int
				for {
					if _upper < _lower {
						_trans += uint(_klen)
						break

					}
					_mid = _lower + (((_upper - _lower) >> 1) & ^1)
					if (data[p]) < _REPL_trans_keys[_mid] {
						_upper = _mid - 2

					} else if (data[p]) > _REPL_trans_keys[_mid+1] {
						_lower = _mid + 2

					} else {
						_trans += uint(((_mid - _keys) >> 1))
						break

					}

				}

			}
		_match:
			{

			}

		}
		cs = int(_REPL_cond_targs[_trans])
		if _REPL_cond_actions[_trans] != 0 {
			_acts = int(_REPL_cond_actions[_trans])

			_nacts = uint(_REPL_actions[_acts])
			_acts += 1
			for _nacts > 0 {
				switch _REPL_actions[_acts] {
				case 0:
					{
						mark[nest] = p
					}

				case 1:
					{
						rdx.RdxType = Float
						rdx.Text = data[mark[nest]:p]
					}

				case 2:
					{
						rdx.RdxType = Integer
						rdx.Text = data[mark[nest]:p]
					}

				case 3:
					{
						if rdx.RdxType != Integer {
							rdx.RdxType = Reference
						}
						rdx.Text = data[mark[nest]:p]
					}

				case 4:
					{
						rdx.RdxType = String
						rdx.Text = data[mark[nest]:p]
					}

				case 5:
					{
						rdx.RdxType = RdxName
						rdx.Text = data[mark[nest]:p]
					}

				case 6:
					{
						rdx.RdxType = NCounter
						rdx.Text = data[mark[nest]:p]
					}

				case 7:
					{
						rdx.RdxType = NInc
						rdx.Text = data[mark[nest]:p]
					}

				case 8:
					{
						rdx.RdxType = ZCounter
						rdx.Text = data[mark[nest]:p]
					}

				case 9:
					{
						rdx.RdxType = ZInc
						rdx.Text = data[mark[nest]:p]
					}

				case 10:
					{
						n := rdx.Nested
						n = append(n, RDX{Parent: rdx})
						rdx.Nested = n
						rdx.RdxType = Map
						rdx = &n[len(n)-1]
						nest++
					}

				case 11:
					{
						if rdx.Parent == nil {
							cs = _RDX_error
							{
								p += 1
								goto _out

							}

						}
						nest--
						rdx = rdx.Parent
						if rdx.RdxType != ESet && rdx.RdxType != Map && rdx.RdxType != RdxObject {
							cs = _RDX_error
							{
								p += 1
								goto _out

							}

						}
						if len(rdx.Nested) == 1 {
							rdx.RdxType = ESet
						}
						if rdx.RdxType == Map {
							if (len(rdx.Nested) & 1) == 1 {
								cs = _RDX_error
								{
									p += 1
									goto _out

								}

							}
						}
					}

				case 12:
					{
						n := rdx.Nested
						n = append(n, RDX{Parent: rdx})
						rdx.Nested = n
						rdx.RdxType = LArray
						rdx = &n[len(n)-1]
						nest++
					}

				case 13:
					{
						if rdx.Parent == nil {
							cs = _RDX_error
							{
								p += 1
								goto _out

							}

						}
						nest--
						rdx = rdx.Parent
						if rdx.RdxType != LArray {
							cs = _RDX_error
							{
								p += 1
								goto _out

							}

						}
					}

				case 14:
					{
						if rdx.Parent == nil {
							cs = _RDX_error
							{
								p += 1
								goto _out

							}

						}
						n := rdx.Parent.Nested
						if rdx.Parent.RdxType == Map {
							if len(n) == 1 {
								rdx.Parent.RdxType = ESet
							} else if (len(n) & 1) == 1 {
								cs = _RDX_error
								{
									p += 1
									goto _out

								}

							}
						}
						n = append(n, RDX{Parent: rdx.Parent})
						rdx.Parent.Nested = n
						rdx = &n[len(n)-1]
					}

				case 15:
					{
						if rdx.Parent == nil {
							cs = _RDX_error
							{
								p += 1
								goto _out

							}

						}
						n := rdx.Parent.Nested
						if rdx.Parent.RdxType == Map {
							if (len(n) & 1) == 0 {
								cs = _RDX_error
								{
									p += 1
									goto _out

								}

							}
						} else if rdx.Parent.RdxType == RdxObject {
							if (len(n) & 1) == 0 {
								cs = _RDX_error
								{
									p += 1
									goto _out

								}

							}
							if rdx.RdxType != RdxName {
								cs = _RDX_error
								{
									p += 1
									goto _out

								}

							}
						} else {
							cs = _RDX_error
							{
								p += 1
								goto _out

							}

						}
						n = append(n, RDX{Parent: rdx.Parent})
						rdx.Parent.Nested = n
						rdx = &n[len(n)-1]
					}

				case 16:
					{
						cmd = string(data[mark[0]:p])
					}

				case 17:
					{
						rdx.Parent = path
						path.Nested = append(path.Nested, *rdx)
						rdx = &RDX{}
					}

				case 18:
					{
						rdx.Parent = path
						path.Nested = append(path.Nested, *rdx)
						rdx = &RDX{}
					}

				}
				_nacts -= 1
				_acts += 1

			}

		}
		if p == eof {
			if cs >= 77 {
				goto _out

			}

		} else {
			if cs != 0 {
				p += 1
				goto _resume

			}

		}
	_out:
		{

		}

	}
	if cs < REPL_first_final {
		err = fmt.Errorf("command parsing failed at pos %d", p)
	}

	return

}
